class RetractedError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, RetractedError.prototype);
    }
}
class UnknownDispatchError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, UnknownDispatchError.prototype);
    }
}
const transactionErrorToString = (error) => {
    return 'docs' in error
        ? error.docs.join('. ')
        : 'message' in error
            ? error.message
            : 'Unable to decode error.';
};

export { RetractedError, UnknownDispatchError, transactionErrorToString };
//# sourceMappingURL=types.mjs.map
