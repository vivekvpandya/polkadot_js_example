import { pfunc } from '@zeitgeistpm/utility/dist/pfunc';
import { isRpcContext } from '../../context/types.mjs';
import { saturatedPoolsIndex } from './functions/saturatedPoolsIndex/index.mjs';
import { getPool, observePool$ } from './functions/getPool/index.mjs';
import { listPools } from './functions/listPools/index.mjs';
import { poolPrices, observePoolPrices$ } from './functions/poolPrices/index.mjs';
import '@polkadot/util';
import '@zeitgeistpm/rpc';
import '@zeitgeistpm/utility/dist/option';
import '@zeitgeistpm/utility/dist/taskeither';
import 'decimal.js';
import 'lodash-es';
import '../../primitives/ztg.mjs';
import '../../primitives/assetid.mjs';
import '../../primitives/blocknumber.mjs';
import '../../primitives/marketid.mjs';
import '@zeitgeistpm/utility/dist/null';

/**
 * Create top level enriched zeitgeist Swaps model.
 *
 * @generic C - Context
 * @param ctx C
 * @returns Swaps<C>
 */
const model = (ctx) => {
    const swaps = {
        listPools: query => listPools(ctx, query),
        getPool: pfunc((query) => getPool(ctx, query), (isRpcContext(ctx)
            ? {
                $: query => observePool$(ctx, query),
            }
            : {})),
        poolPrices: pfunc((query) => poolPrices(ctx, query), (isRpcContext(ctx)
            ? {
                $: query => observePoolPrices$(ctx, query),
            }
            : {})),
        saturatedPoolsIndex: pools => saturatedPoolsIndex(ctx, pools),
    };
    return swaps;
};

export { model };
//# sourceMappingURL=index.mjs.map
