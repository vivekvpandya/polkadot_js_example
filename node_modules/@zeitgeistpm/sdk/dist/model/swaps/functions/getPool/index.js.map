{"version":3,"file":"index.js","sources":["../../../../../src/model/swaps/functions/getPool/index.ts"],"sourcesContent":["import { Observable, of } from 'rxjs'\nimport * as O from '@zeitgeistpm/utility/dist/option'\nimport { switchMap } from 'rxjs/operators'\nimport {\n  Context,\n  IndexerContext,\n  isFullContext,\n  isIndexerContext,\n  isRpcContext,\n  RpcContext,\n} from '../../../../context'\nimport { MetadataStorage } from '../../../../meta'\nimport { IndexedPool, Pool, RpcPool, rpcPool } from '../../pool'\nimport { isMarketIdQuery, PoolGetQuery } from '../../types'\n\n/**\n * Fetch a pool by its market id or pool id.\n * Query capabilities and returned data differentiates between a rpc and indexer context.\n *\n * @generic C - Context\n * @param context C - the context to query in\n * @param query PoolGetQuery\n * @returns Promise<Pool<C>>\n */\nexport const getPool = async <C extends Context<MS>, MS extends MetadataStorage>(\n  context: C,\n  query: PoolGetQuery,\n): Promise<O.IOption<Pool<C, MS>>> => {\n  if (isIndexerContext<MS>(context)) {\n    return getFromIndexer(context, query)\n  } else if (isRpcContext<MS>(context)) {\n    return getFromRpc<typeof context, MS>(context, query)\n  }\n  throw new Error('unrechable code detected.')\n}\n\n/**\n * Concrete get function for indexer context\n * @private\n */\nconst getFromIndexer = async <C extends Context<MS>, MS extends MetadataStorage>(\n  context: IndexerContext,\n  query: PoolGetQuery,\n): Promise<O.IOption<Pool<C, MS>>> => {\n  const {\n    pools: [pool],\n  } = await context.indexer.pools({\n    where: isMarketIdQuery(query)\n      ? { marketId_eq: query.marketId }\n      : { poolId_eq: query.poolId },\n  })\n  if (pool) {\n    return O.option(O.some(pool as Pool<C, MS>))\n  }\n  return O.option(O.none())\n}\n\n/**\n * Concrete get function for rpc context\n * @private\n */\nconst getFromRpc = async <C extends RpcContext<MS>, MS extends MetadataStorage>(\n  context: C,\n  query: PoolGetQuery,\n): Promise<O.IOption<Pool<C, MS>>> => {\n  let poolId: number\n\n  if (isMarketIdQuery(query)) {\n    const mPoolId = await context.api.query.marketCommons.marketPool(query.marketId)\n    if (mPoolId.isNone) O.option(O.none())\n    poolId = mPoolId.unwrap().toNumber()\n  } else {\n    poolId = query.poolId\n  }\n\n  const marketPool = await context.api.query.swaps.pools(poolId)\n\n  if (marketPool.isNone) O.option(O.none())\n\n  return O.option(O.some(rpcPool(context, poolId, marketPool.unwrap()) as Pool<C, MS>))\n}\n\n/**\n * Fetch pool and stream changes from rpc.\n *\n * @param context RpcContext\n * @param query PoolGetQuery\n * @returns Observable<Pool<C, MS>>\n */\nexport const observePool$ = <C extends RpcContext<MS>, MS extends MetadataStorage>(\n  context: C,\n  query: PoolGetQuery,\n): Observable<Pool<C, MS>> => {\n  const poolId$ = isMarketIdQuery(query)\n    ? observeMarketPoolId$(context, query.marketId)\n    : of(query.poolId)\n\n  return poolId$.pipe(\n    switchMap(\n      poolId =>\n        new Observable<Pool<C, MS>>(subscription => {\n          const unsub = context.api.query.swaps.pools(poolId, pool => {\n            if (pool.isNone) return subscription.complete()\n            subscription.next(rpcPool(context, poolId, pool.unwrap()) as Pool<C, MS>)\n          })\n\n          return () => {\n            subscription.complete()\n            unsub.then(unsub => unsub())\n          }\n        }),\n    ),\n  )\n}\n\n/**\n * Observe the pool id of a market. Usefull for starting to observe the pool of a market\n * at any time even before it is created.\n *\n * @param context RpcContext<MS>\n * @param marketId number\n * @returns Observable<number>\n */\nexport const observeMarketPoolId$ = <C extends RpcContext<MS>, MS extends MetadataStorage>(\n  context: C,\n  marketId: number,\n) => {\n  return new Observable<number>(subscription => {\n    context.api.query.marketCommons.marketPool(marketId, poolId => {\n      if (poolId.isSome) {\n        subscription.next(poolId.unwrap().toNumber())\n      }\n    })\n  })\n}\n"],"names":["isIndexerContext","isRpcContext","isMarketIdQuery","O","rpcPool","of","switchMap","Observable","pool"],"mappings":"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"}