import { Observable } from 'rxjs';
import * as O from '@zeitgeistpm/utility/dist/option';
import { Context, IndexerContext, RpcContext } from '../../../../context';
import { MetadataStorage } from '../../../../meta';
import { IndexedPool, Pool, RpcPool } from '../../pool';
import { PoolGetQuery } from '../../types';
/**
 * Fetch a pool by its market id or pool id.
 * Query capabilities and returned data differentiates between a rpc and indexer context.
 *
 * @generic C - Context
 * @param context C - the context to query in
 * @param query PoolGetQuery
 * @returns Promise<Pool<C>>
 */
export declare const getPool: <C extends Context<MS>, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../../meta").CommentMetadata>>(context: C, query: PoolGetQuery) => Promise<O.IOption<import("../../../..").Data<C, C extends RpcContext<MS> ? RpcPool : never, C extends IndexerContext ? IndexedPool<C, MS> : never, MS>>>;
/**
 * Fetch pool and stream changes from rpc.
 *
 * @param context RpcContext
 * @param query PoolGetQuery
 * @returns Observable<Pool<C, MS>>
 */
export declare const observePool$: <C extends RpcContext<MS>, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../../meta").CommentMetadata>>(context: C, query: PoolGetQuery) => Observable<import("../../../..").Data<C, C extends RpcContext<MS> ? RpcPool : never, C extends IndexerContext ? IndexedPool<C, MS> : never, MS>>;
/**
 * Observe the pool id of a market. Usefull for starting to observe the pool of a market
 * at any time even before it is created.
 *
 * @param context RpcContext<MS>
 * @param marketId number
 * @returns Observable<number>
 */
export declare const observeMarketPoolId$: <C extends RpcContext<MS>, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../../meta").CommentMetadata>>(context: C, marketId: number) => Observable<number>;
//# sourceMappingURL=index.d.ts.map