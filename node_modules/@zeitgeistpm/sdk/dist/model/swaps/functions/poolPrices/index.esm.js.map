{"version":3,"file":"index.esm.js","sources":["../../../../../src/model/swaps/functions/poolPrices/index.ts"],"sourcesContent":["import { HistoricalAssetOrderByInput } from '@zeitgeistpm/indexer'\nimport { project, range, zip } from '@zeitgeistpm/utility/dist/array'\nimport { asBlock, asBlocks, isBlocks, asMs } from '@zeitgeistpm/utility/dist/time'\nimport { Decimal } from 'decimal.js'\nimport { Observable } from 'rxjs'\nimport {\n  Context,\n  IndexerContext,\n  isFullContext,\n  isIndexerContext,\n  RpcContext,\n} from '../../../../context'\nimport { BlockNumber } from '../../../../primitives'\nimport { getIndexOf, IOAssetId } from '../../../../primitives/assetid'\nimport { now } from '../../../time/functions/now'\nimport type {\n  AssetPriceAtBlock,\n  PoolAssetPricesAtBlock,\n  PoolPrices,\n  PoolPricesQuery,\n  PoolPricesStreamQuery,\n} from './types'\n\n/**\n * Fetch poolprices for a cetain timespan. Will prefer indexer but use rpc if indexer isnt available.\n *\n * @generic C extends Context\n * @param context C\n * @param query PoolPricesQuery\n * @returns Promise<PoolPrices>\n */\nexport const poolPrices = async <C extends Context>(\n  context: C,\n  query: PoolPricesQuery,\n): Promise<PoolPrices> => {\n  const data =\n    isFullContext(context) || isIndexerContext(context)\n      ? await indexerPoolPrices(context, query)\n      : await rpcPoolPrices(context, query)\n  return data\n}\n\n/**\n * Fetch poolprices for a cetain timespan from rpc.\n *\n * @private\n * @param context RpcContext\n * @param query PoolPricesQuery\n * @returns Promise<PoolPrices>\n */\nconst rpcPoolPrices = async <C extends RpcContext>(\n  ctx: C,\n  query: PoolPricesQuery,\n): Promise<PoolPrices> => {\n  const time = await now(ctx)\n\n  const [pool, { start, end }] = await Promise.all([\n    ctx.api.query.swaps.pools(query.pool).then(o => o.unwrap()),\n    asBlocks(time, query.timespan),\n  ])\n\n  const ztg = { Ztg: null }\n\n  let blocks = range(start, end) as BlockNumber[]\n\n  if (query.resolution) {\n    const step = asMs(query.resolution) / time.period\n    blocks = project(blocks, step)\n  }\n\n  const assets = pool.assets.toArray().slice(0, -1)\n\n  const prices = await Promise.all(\n    assets.map(async asset => {\n      console.log('FOOOO')\n      const prices = await ctx.api.rpc.swaps.getSpotPrices(query.pool, ztg, asset, blocks)\n      console.log('BAAR')\n      return zip<BlockNumber, Decimal>(\n        blocks,\n        prices.map(price => new Decimal(price.toString())),\n      )\n    }),\n  )\n\n  return prices\n}\n\n/**\n * Fetch poolprices for a cetain timespan from indexer.\n *\n * @private\n * @param context IndexerContext\n * @param query PoolPricesQuery\n * @returns Promise<PoolPrices>\n */\nconst indexerPoolPrices = async (\n  context: IndexerContext,\n  query: PoolPricesQuery,\n): Promise<PoolPrices> => {\n  const { assets } = await context.indexer.assets({\n    where: {\n      poolId_eq: query.pool,\n    },\n  })\n\n  const { historicalAssets } = await context.indexer.historicalAssets({\n    order: [HistoricalAssetOrderByInput.BlockNumberAsc],\n    where: {\n      assetId_in: assets.map(id => id.assetId),\n      ...(isBlocks(query.timespan)\n        ? {\n            blockNumber_gte: query.timespan.start,\n            blockNumber_lte: query.timespan.end,\n          }\n        : {\n            timestamp_gte: query.timespan.start,\n            timestamp_lte: query.timespan.end,\n          }),\n    },\n  })\n\n  let prices: PoolPrices = []\n\n  for (const record of historicalAssets) {\n    if (!record.newPrice) continue\n\n    const assetId = JSON.parse(record.assetId)\n\n    if (!IOAssetId.is(assetId)) {\n      console.warn('found wrongly formated asset id', assetId)\n      continue\n    }\n\n    const index = getIndexOf(assetId)\n\n    if (index === null) {\n      continue\n    }\n\n    prices[index] = [\n      ...(prices[index] || []),\n      [record.blockNumber as BlockNumber, new Decimal(record.newPrice * 10 ** 10)],\n    ]\n  }\n\n  return prices\n}\n\n/**\n * Will stream prices for a given pool tailed after a block or date.\n * Will emit the price at each block in the stream as dictated by the resolution passed.\n * When it reaches the end it starts to listen for new blocks and emits an item for every block.\n *\n * @param ctx RpcContext\n * @param query PoolPricesStreamQuery\n * @returns Observable<PoolAssetPricesAtBlock>\n */\nexport const observePoolPrices$ = <C extends RpcContext>(\n  ctx: C,\n  query: PoolPricesStreamQuery,\n): Observable<PoolAssetPricesAtBlock> => {\n  return new Observable(sub => {\n    const ztg = { Ztg: null }\n\n    const unsub = Promise.all([\n      ctx.api.query.swaps.pools(query.pool).then(o => o.unwrap()),\n      now(ctx),\n    ]).then(async ([pool, now]) => {\n      const assets = pool.assets.toArray().slice(0, -1)\n\n      if (query.from) {\n        const head = await rpcPoolPrices(ctx, {\n          pool: query.pool,\n          resolution: query.resolution,\n          timespan: {\n            start: asBlock(now, query.from),\n            end: now.block,\n          },\n        })\n\n        head[0].forEach((_, index) => sub.next(head.map(prices => prices[index])))\n      }\n\n      return ctx.api.rpc.chain.subscribeFinalizedHeads(async header => {\n        const block = header.number.toNumber()\n        const prices: PoolAssetPricesAtBlock = await Promise.all(\n          assets.map(async asset => {\n            const [price] = await ctx.api.rpc.swaps.getSpotPrices(\n              query.pool,\n              query.assetIn ?? { Ztg: null },\n              asset,\n              [block],\n            )\n            return [block, new Decimal(price.toString())] as AssetPriceAtBlock\n          }),\n        )\n        sub.next(prices)\n      })\n    })\n    return () => {\n      unsub.then(unsub => unsub())\n      sub.unsubscribe()\n    }\n  })\n}\n"],"names":[],"mappings":"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"}