import { Observable } from 'rxjs';
import { Context, RpcContext } from '../../../../context';
import type { PoolAssetPricesAtBlock, PoolPrices, PoolPricesQuery, PoolPricesStreamQuery } from './types';
/**
 * Fetch poolprices for a cetain timespan. Will prefer indexer but use rpc if indexer isnt available.
 *
 * @generic C extends Context
 * @param context C
 * @param query PoolPricesQuery
 * @returns Promise<PoolPrices>
 */
export declare const poolPrices: <C extends Context<import("../../../..").MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../..").CommentMetadata>>>(context: C, query: PoolPricesQuery) => Promise<PoolPrices>;
/**
 * Will stream prices for a given pool tailed after a block or date.
 * Will emit the price at each block in the stream as dictated by the resolution passed.
 * When it reaches the end it starts to listen for new blocks and emits an item for every block.
 *
 * @param ctx RpcContext
 * @param query PoolPricesStreamQuery
 * @returns Observable<PoolAssetPricesAtBlock>
 */
export declare const observePoolPrices$: <C extends RpcContext<import("../../../..").MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../..").CommentMetadata>>>(ctx: C, query: PoolPricesStreamQuery) => Observable<PoolAssetPricesAtBlock>;
//# sourceMappingURL=index.d.ts.map