import { Context, IndexerContext, RpcContext } from '../../../../context';
import { MetadataStorage } from '../../../../meta';
import { Pool } from '../../pool';
import { SaturatedPoolIndex } from './types';
export * from './types';
/**
 * Get an asset index for a list of pools from either rpc or indexer.
 *
 * @param context C
 * @param pools Pool<C, M
 * @returns Promise<AssetIndex>
 */
export declare const saturatedPoolsIndex: <C extends Context<MS>, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../../meta").CommentMetadata>>(context: C, pools: import("../../../..").Data<C, C extends RpcContext<MS> ? import("../../pool").RpcPool : never, C extends IndexerContext ? import("../../pool").IndexedPool<C, MS> : never, MS>[]) => Promise<SaturatedPoolIndex<C, MS>>;
/**
 * Get an assets index for a list of pools from the indexer.
 *
 * @param ctx IndexerContext
 * @param pools Pool<C, M
 * @returns Promise<AssetIndex>
 */
export declare const indexer: <C extends IndexerContext, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../../meta").CommentMetadata>>(ctx: C, pools: import("../../../..").Data<C, C extends RpcContext<MS> ? import("../../pool").RpcPool : never, C extends IndexerContext ? import("../../pool").IndexedPool<C, MS> : never, MS>[]) => Promise<SaturatedPoolIndex<C, MS>>;
/**
 * Get an asset index for a list of pools from node rpc.
 *
 * @param ctx RpcContext<MS>
 * @param pools Pool<C, M
 * @returns Promise<AssetIndex>
 */
export declare const rpc: <C extends RpcContext<MS>, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../../meta").CommentMetadata>>(ctx: C, pools: import("../../../..").Data<C, C extends RpcContext<MS> ? import("../../pool").RpcPool : never, C extends IndexerContext ? import("../../pool").IndexedPool<C, MS> : never, MS>[]) => Promise<SaturatedPoolIndex<C, MS>>;
//# sourceMappingURL=index.d.ts.map