{"version":3,"file":"pool.esm.js","sources":["../../../src/model/swaps/pool.ts"],"sourcesContent":["import type { Option, StorageKey, u128, Vec } from '@polkadot/types'\nimport type {\n  ZeitgeistPrimitivesAsset,\n  ZeitgeistPrimitivesPool,\n} from '@polkadot/types/lookup'\nimport type { ISubmittableResult } from '@polkadot/types/types'\nimport { isNumber } from '@polkadot/util'\nimport { PoolsQuery } from '@zeitgeistpm/indexer'\nimport {\n  KeyringPairOrExtSigner,\n  signAndSend,\n  TransactionError,\n  TransactionHooks,\n} from '@zeitgeistpm/rpc'\nimport { Unpacked } from '@zeitgeistpm/utility/dist/array'\nimport * as O from '@zeitgeistpm/utility/dist/option'\nimport * as Te from '@zeitgeistpm/utility/dist/taskeither'\nimport Decimal from 'decimal.js'\nimport { isEqual } from 'lodash-es'\nimport { Context, IndexerContext, RpcContext } from '../../context'\nimport { MetadataStorage } from '../../meta'\nimport {\n  AssetId,\n  parseAssetId,\n  getIndexOf,\n  IOCategoricalAssetId,\n  IOScalarAssetId,\n  IOZtgAssetId,\n} from '../../primitives'\nimport { Data, isRpcData } from '../../primitives/data'\n\n/**\n * Union Pool type of indexed and rpc types.\n * Will differentiate between indexer and rpc context\n *\n * @generic C Context - the context to fetch the marketlist for.\n */\nexport type Pool<\n  C extends Context<MS>,\n  MS extends MetadataStorage = MetadataStorage,\n> = Data<\n  C,\n  C extends RpcContext<MS> ? RpcPool : never,\n  C extends IndexerContext ? IndexedPool<C, MS> : never,\n  MS\n>\n\n/**\n * Concrete Pool type for indexed Pool.\n */\nexport type IndexedPool<\n  C extends Context<MS>,\n  MS extends MetadataStorage = MetadataStorage,\n> = Unpacked<PoolsQuery['pools']> & (C extends RpcContext<MS> ? PoolMethods : {})\n\n/**\n * Concrete Pool type for rpc Pool.\n */\nexport type RpcPool = (ZeitgeistPrimitivesPool & PoolMethods) & {\n  /**\n   * The pool id/index on chain.\n   */\n  poolId: number\n}\n\nexport type PoolMethods = {\n  /**\n   * Get the account id for the pool.\n   */\n  accountId: Te.TaskEither<Error, string, []>\n  swapExactAmountIn: Te.TaskEither<\n    TransactionError,\n    ISubmittableResult,\n    [params: Omit<SwapExactAmountInParams, 'poolId'> & TransactionHooks]\n  >\n  swapExactAmountOut: Te.TaskEither<\n    TransactionError,\n    ISubmittableResult,\n    [params: Omit<SwapExactAmountOutParams, 'poolId'> & TransactionHooks]\n  >\n  join: Te.TaskEither<\n    TransactionError,\n    ISubmittableResult,\n    [params: Omit<PoolJoinParams, 'poolId'> & TransactionHooks]\n  >\n  joinSubsidy: Te.TaskEither<\n    TransactionError,\n    ISubmittableResult,\n    [params: Omit<PoolJoinParams, 'poolId' | 'maxAssetsIn'> & TransactionHooks]\n  >\n  joinWithExactAssetAmount: Te.TaskEither<\n    TransactionError,\n    ISubmittableResult,\n    [params: Omit<PoolJoinWithExactAmountParams, 'poolId'> & TransactionHooks]\n  >\n  joinWithExactPoolAmount: Te.TaskEither<\n    TransactionError,\n    ISubmittableResult,\n    [params: Omit<PoolJoinWithExactPoolAmount, 'poolId'> & TransactionHooks]\n  >\n  exit: Te.TaskEither<\n    TransactionError,\n    ISubmittableResult,\n    [params: Omit<PoolExitParams, 'poolId'> & TransactionHooks]\n  >\n  exitSubsidy: Te.TaskEither<\n    TransactionError,\n    ISubmittableResult,\n    [params: Omit<PoolExitSubsidyParams, 'poolId'> & TransactionHooks]\n  >\n  exitWithExactAssetAmount: Te.TaskEither<\n    TransactionError,\n    ISubmittableResult,\n    [params: Omit<PoolExitWithExactAssetAmountParams, 'poolId'> & TransactionHooks]\n  >\n  exitWithExactPoolAmount: Te.TaskEither<\n    TransactionError,\n    ISubmittableResult,\n    [params: Omit<PoolExitWithExactPoolAmountParams, 'poolId'> & TransactionHooks]\n  >\n}\n\n/**\n * Params needed to create a pool.\n */\nexport type PoolDeploymentParams = {\n  marketId: number | u128\n  swapFee: string | number | u128\n  amount: string | number | u128\n  weights: Array<string | number | u128>\n  signer: KeyringPairOrExtSigner\n}\n\n/**\n * Params needed to exhange(buy or sell) a full set of assets for a pool.\n */\nexport type ExchangeFullSetParams = {\n  marketId: number | u128\n  amount: number\n  signer: KeyringPairOrExtSigner\n}\n\nexport type SwapExactAmountInParams = {\n  poolId: u128 | number | Uint8Array\n  assetIn: ZeitgeistPrimitivesAsset | AssetId | Uint8Array\n  assetAmountIn: u128 | number | Uint8Array\n  assetOut: ZeitgeistPrimitivesAsset | AssetId | Uint8Array\n  minAssetAmountOut?: u128 | number | Uint8Array\n  maxPrice?: u128 | number | Uint8Array\n  signer: KeyringPairOrExtSigner\n}\n\nexport type SwapExactAmountOutParams = {\n  poolId: u128 | number | Uint8Array\n  assetIn: ZeitgeistPrimitivesAsset | AssetId | Uint8Array\n  maxAssetAmountIn?: u128 | number | Uint8Array | null\n  assetOut: ZeitgeistPrimitivesAsset | AssetId | Uint8Array\n  assetAmountOut: u128 | number | Uint8Array\n  maxPrice?: u128 | number | Uint8Array | null\n  signer: KeyringPairOrExtSigner\n}\n\nexport type PoolJoinParams = {\n  poolId: u128 | number | Uint8Array\n  poolAmount: u128 | number | Uint8Array\n  maxAssetsIn: Vec<u128> | Array<u128 | number | Uint8Array>\n  signer: KeyringPairOrExtSigner\n}\n\nexport type PoolJoinWithExactAmountParams = {\n  poolId: u128 | number | Uint8Array\n  assetIn: ZeitgeistPrimitivesAsset | AssetId | Uint8Array\n  assetAmount: u128 | number | Uint8Array\n  minPoolAmount: u128 | number | Uint8Array\n  signer: KeyringPairOrExtSigner\n}\n\nexport type PoolJoinWithExactPoolAmount = {\n  poolId: u128 | number | Uint8Array\n  asset: ZeitgeistPrimitivesAsset | AssetId | Uint8Array\n  poolAmount: u128 | number | Uint8Array\n  maxAssetAmount: u128 | number | Uint8Array\n  signer: KeyringPairOrExtSigner\n}\n\nexport type PoolExitParams = {\n  poolId: u128 | number | Uint8Array\n  poolAmount: u128 | number | Uint8Array\n  minAssetsOut: Vec<u128> | Array<u128 | number | Uint8Array>\n  signer: KeyringPairOrExtSigner\n}\n\nexport type PoolExitSubsidyParams = {\n  poolId: u128 | number | Uint8Array\n  amount: u128 | number | Uint8Array\n  signer: KeyringPairOrExtSigner\n}\n\nexport type PoolExitWithExactAssetAmountParams = {\n  poolId: u128 | number | Uint8Array\n  asset: ZeitgeistPrimitivesAsset | AssetId | Uint8Array\n  assetAmount: u128 | number | Uint8Array\n  maxPoolAmount: u128 | number | Uint8Array\n  signer: KeyringPairOrExtSigner\n}\n\nexport type PoolExitWithExactPoolAmountParams = {\n  poolId: u128 | number | Uint8Array\n  asset: ZeitgeistPrimitivesAsset | AssetId | Uint8Array\n  poolAmount: u128 | number | Uint8Array\n  minAssetAmount: u128 | number | Uint8Array\n  signer: KeyringPairOrExtSigner\n}\n\n/**\n * Create new RpcPool with associated context, id and on chain primitive.\n *\n * @param ctx RpcContext\n * @param poolId number | u128\n * @param primitive ZeitgeistPrimitivesPool\n * @returns RpcPool\n */\nexport const rpcPool = (\n  ctx: RpcContext,\n  poolId: number | u128,\n  primitive: ZeitgeistPrimitivesPool,\n): RpcPool => {\n  let pool = primitive as RpcPool\n\n  pool.poolId = isNumber(poolId) ? poolId : poolId.toNumber()\n\n  pool.accountId = Te.from(async () =>\n    (await ctx.api.rpc.swaps.poolAccountId(poolId)).toString(),\n  )\n\n  pool.swapExactAmountIn = Te.from(async params =>\n    signAndSend({\n      api: ctx.api,\n      tx: ctx.api.tx.swaps.swapExactAmountIn(\n        poolId,\n        params.assetIn,\n        params.assetAmountIn,\n        params.assetOut,\n        params.minAssetAmountOut ?? null,\n        params.maxPrice ?? null,\n      ),\n      signer: params.signer,\n      hooks: params.hooks,\n    }),\n  )\n\n  pool.swapExactAmountOut = Te.from(async params =>\n    signAndSend({\n      api: ctx.api,\n      tx: ctx.api.tx.swaps.swapExactAmountOut(\n        poolId,\n        params.assetIn,\n        params.maxAssetAmountIn ?? null,\n        params.assetOut,\n        params.assetAmountOut,\n        params.maxPrice ?? null,\n      ),\n      signer: params.signer,\n      hooks: params.hooks,\n    }),\n  )\n\n  pool.join = Te.from(async params =>\n    signAndSend({\n      api: ctx.api,\n      tx: ctx.api.tx.swaps.poolJoin(poolId, params.poolAmount, params.maxAssetsIn),\n      signer: params.signer,\n      hooks: params.hooks,\n    }),\n  )\n\n  pool.joinSubsidy = Te.from(async params =>\n    signAndSend({\n      api: ctx.api,\n      tx: ctx.api.tx.swaps.poolJoinSubsidy(poolId, params.poolAmount),\n      signer: params.signer,\n      hooks: params.hooks,\n    }),\n  )\n\n  pool.joinWithExactAssetAmount = Te.from(async params =>\n    signAndSend({\n      api: ctx.api,\n      tx: ctx.api.tx.swaps.poolJoinWithExactAssetAmount(\n        poolId,\n        params.assetIn,\n        params.assetAmount,\n        params.minPoolAmount,\n      ),\n      signer: params.signer,\n      hooks: params.hooks,\n    }),\n  )\n\n  pool.joinWithExactPoolAmount = Te.from(async params =>\n    signAndSend({\n      api: ctx.api,\n      tx: ctx.api.tx.swaps.poolJoinWithExactPoolAmount(\n        poolId,\n        params.asset,\n        params.poolAmount,\n        params.maxAssetAmount,\n      ),\n      signer: params.signer,\n      hooks: params.hooks,\n    }),\n  )\n\n  pool.exit = Te.from(async params =>\n    signAndSend({\n      api: ctx.api,\n      tx: ctx.api.tx.swaps.poolExit(poolId, params.poolAmount, params.minAssetsOut),\n      signer: params.signer,\n      hooks: params.hooks,\n    }),\n  )\n\n  pool.exitSubsidy = Te.from(async params =>\n    signAndSend({\n      api: ctx.api,\n      tx: ctx.api.tx.swaps.poolExitSubsidy(poolId, params.amount),\n      signer: params.signer,\n      hooks: params.hooks,\n    }),\n  )\n\n  pool.exitWithExactAssetAmount = Te.from(async params =>\n    signAndSend({\n      api: ctx.api,\n      tx: ctx.api.tx.swaps.poolExitWithExactAssetAmount(\n        poolId,\n        params.asset,\n        params.assetAmount,\n        params.maxPoolAmount,\n      ),\n      signer: params.signer,\n      hooks: params.hooks,\n    }),\n  )\n\n  pool.exitWithExactPoolAmount = Te.from(async params =>\n    signAndSend({\n      api: ctx.api,\n      tx: ctx.api.tx.swaps.poolExitWithExactPoolAmount(\n        poolId,\n        params.asset,\n        params.poolAmount,\n        params.minAssetAmount,\n      ),\n      signer: params.signer,\n      hooks: params.hooks,\n    }),\n  )\n\n  return pool\n}\n\n/**\n * Get the weight of an asset in a pool by its AssetId.\n *\n * @param pool Pool<C, MS>,\n * @param assetId AssetId\n * @returns O.IOption<Decimal>\n */\nexport const getAssetWeight = <C extends Context<MS>, MS extends MetadataStorage>(\n  pool: Pool<C, MS>,\n  assetId: AssetId,\n): O.IOption<Decimal> => {\n  let weight: string | undefined\n\n  if (isRpcData(pool)) {\n    const weights = pool.weights.unwrapOr(null)\n\n    if (!weights) {\n      return O.option(O.none())\n    }\n\n    const entries = [...weights.entries()]\n\n    if (IOZtgAssetId.is(assetId)) {\n      weight = entries.find(([asset]) => asset.isZtg)?.[1]?.toString()\n    } else if (IOCategoricalAssetId.is(assetId)) {\n      weight = entries\n        .find(\n          ([asset]) =>\n            asset.isCategoricalOutcome &&\n            asset.asCategoricalOutcome[1].toNumber() === getIndexOf(assetId),\n        )\n        ?.toString()\n    } else if (IOScalarAssetId.is(assetId)) {\n      weight = entries\n        .find(\n          ([asset]) =>\n            asset.isScalarOutcome &&\n            ((asset.asScalarOutcome[1].isLong && assetId.ScalarOutcome[1] === 'Long') ||\n              (asset.asScalarOutcome[1].isShort && assetId.ScalarOutcome[1] === 'Short')),\n        )\n        ?.toString()\n    }\n  } else {\n    weight = pool.weights.find(\n      weight => weight?.assetId && isEqual(parseAssetId(weight?.assetId).unwrap(), assetId),\n    )?.len\n  }\n\n  return weight ? O.option(O.some(new Decimal(weight))) : O.option(O.none())\n}\n\n/**\n * Map storage entries to rpc pools\n *\n * @param ctx RpcContext<MS>\n * @param entries [StorageKey<[u128]>, Option<ZeitgeistPrimitivesPool>][]\n * @returns RpcPool[]\n */\nexport const fromEntries = <C extends RpcContext<MS>, MS extends MetadataStorage>(\n  ctx: C,\n  entries: [StorageKey<[u128]>, Option<ZeitgeistPrimitivesPool>][],\n): Pool<C, MS>[] => {\n  return entries.map(\n    ([\n      {\n        args: [poolId],\n      },\n      pool,\n    ]) => rpcPool(ctx, poolId.toNumber(), pool.unwrap()) as Pool<C, MS>,\n  )\n}\n"],"names":[],"mappings":"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"}