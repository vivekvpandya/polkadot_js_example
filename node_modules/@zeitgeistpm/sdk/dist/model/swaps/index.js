'use strict';

var pfunc = require('@zeitgeistpm/utility/dist/pfunc');
var types$1 = require('../../context/types.js');
var index$3 = require('./functions/saturatedPoolsIndex/index.js');
var index$1 = require('./functions/getPool/index.js');
var index = require('./functions/listPools/index.js');
var index$2 = require('./functions/poolPrices/index.js');
require('@polkadot/util');
require('@zeitgeistpm/rpc');
require('@zeitgeistpm/utility/dist/option');
require('@zeitgeistpm/utility/dist/taskeither');
require('decimal.js');
require('lodash-es');
require('../../primitives/ztg.js');
require('../../primitives/assetid.js');
require('../../primitives/blocknumber.js');
require('../../primitives/marketid.js');
require('@zeitgeistpm/utility/dist/null');

/**
 * Create top level enriched zeitgeist Swaps model.
 *
 * @generic C - Context
 * @param ctx C
 * @returns Swaps<C>
 */
const model = (ctx) => {
    const swaps = {
        listPools: query => index.listPools(ctx, query),
        getPool: pfunc.pfunc((query) => index$1.getPool(ctx, query), (types$1.isRpcContext(ctx)
            ? {
                $: query => index$1.observePool$(ctx, query),
            }
            : {})),
        poolPrices: pfunc.pfunc((query) => index$2.poolPrices(ctx, query), (types$1.isRpcContext(ctx)
            ? {
                $: query => index$2.observePoolPrices$(ctx, query),
            }
            : {})),
        saturatedPoolsIndex: pools => index$3.saturatedPoolsIndex(ctx, pools),
    };
    return swaps;
};

exports.model = model;
//# sourceMappingURL=index.js.map
