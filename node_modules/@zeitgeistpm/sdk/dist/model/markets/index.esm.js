import { pfunc } from '@zeitgeistpm/utility/dist/pfunc';
import * as Te from '@zeitgeistpm/utility/dist/taskeither';
import { isRpcContext } from '../../context/types.esm.js';
import { create, transaction } from './functions/create/index.esm.js';
import { get, observeMarket$ } from './functions/get/index.esm.js';
import { list } from './functions/list/index.esm.js';
import { getStage } from './functions/getStage/index.esm.js';
import '@polkadot/util';
import '@zeitgeistpm/rpc';
import '@zeitgeistpm/utility/dist/assert';
import '@zeitgeistpm/utility/dist/either';
import '@zeitgeistpm/utility/dist/error';
import '@zeitgeistpm/utility/dist/option';
import '@zeitgeistpm/utility/dist/time';
import 'cids';
import 'decimal.js';
import 'rxjs';
import 'rxjs/operators';
import 'lodash-es';
import '../../primitives/ztg.esm.js';
import '../../primitives/assetid.esm.js';
import '../../primitives/blocknumber.esm.js';
import '../../primitives/marketid.esm.js';
import '@zeitgeistpm/utility/dist/null';
import '@zeitgeistpm/indexer';
import '@zeitgeistpm/utility/dist/array';
import '@zeitgeistpm/utility/dist/infinity';

/**
 * Create top level enriched zeitgeist Markets model.
 *
 * @generic C - Context
 * @param context C
 * @returns Markets<C>
 */
const model = (ctx) => {
    const markets = {
        list: (query) => list(ctx, query),
        get: pfunc((query) => get(ctx, query), (isRpcContext(ctx)
            ? {
                $: (query) => observeMarket$(ctx, query),
            }
            : {})),
        create: (isRpcContext(ctx)
            ? pfunc(Te.from(params => create(ctx, params)), {
                tx: (params) => transaction(ctx, params),
            })
            : undefined),
        getStage: (isRpcContext(ctx)
            ? async (market, time) => {
                return getStage(ctx, market, time);
            }
            : undefined),
    };
    return markets;
};

export { model };
//# sourceMappingURL=index.esm.js.map
