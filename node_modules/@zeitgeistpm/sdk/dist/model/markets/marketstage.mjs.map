{"version":3,"file":"marketstage.mjs","sources":["../../../src/model/markets/marketstage.ts"],"sourcesContent":["import { Infinity, isInfinity } from '@zeitgeistpm/utility/dist/infinity'\n\n/**\n * Union type of all possible market stages.\n */\nexport type MarketStage =\n  | Proposed\n  | Trading\n  | GracePeriod\n  | OracleReportingPeriod\n  | OpenReportingPeriod\n  | Reported\n  | Disputed\n  | AuthorizedReport\n  | Resolved\n  | Destroyed\n\n/**\n * The market has been proposed and is waiting to be approved.\n */\nexport type Proposed = InfiniteStage<'Proposed'>\n\n/**\n * The market is active and trading.\n */\nexport type Trading = DynamicStage<'Trading'>\n\n/**\n * The market has been closed and is in the grace period awaiting to go into its reporting stage.\n */\nexport type GracePeriod = DynamicStage<'GracePeriod'>\n\n/**\n * The market is in its reporting stage where oracle reports are accepted.\n */\nexport type OracleReportingPeriod = DynamicStage<'OracleReportingPeriod'>\n\n/**\n * The market is in its reporting stage where reports from anyone are accepted.\n */\nexport type OpenReportingPeriod = InfiniteStage<'OpenReportingPeriod'>\n\n/**\n * The market has been reported and will be resolved if no dispute is raised.\n */\nexport type Reported = DynamicStage<'Reported'>\n\n/**\n * The market has been disputed and is awaiting an authorized report.\n */\nexport type Disputed = InfiniteStage<'Disputed'>\n\n/**\n * The market has an authorized report and is awaiting resolution after the CorrectionDuration has expired..\n */\nexport type AuthorizedReport = DynamicStage<'AuthorizedReport'>\n\n/**\n * The market has been resolved.\n */\nexport type Resolved = InfiniteStage<'Resolved'>\n\n/**\n * The market has been destroyed.\n */\nexport type Destroyed = InfiniteStage<'Destroyed'>\n\n/**\n * A stage with a dynamic remaining time.\n */\nexport type DynamicStage<T> = { type: T; remainingTime: number; totalTime: number }\n\n/**\n * A stage with an infinite remaining time.\n */\nexport type InfiniteStage<T> = { type: T; remainingTime: Infinity; totalTime: Infinity }\n\n/**\n * Check if a stage is a InfiniteStage.\n *\n * @param stage MarketStage\n * @returns stage is InfiniteStage<any>\n */\nexport const isInfinite = (stage: MarketStage): stage is InfiniteStage<any> =>\n  isInfinity(stage.remainingTime) && isInfinity(stage.totalTime)\n"],"names":[],"mappings":";;AA6EA;;;;;AAKG;MACU,UAAU,GAAG,CAAC,KAAkB,KAC3C,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,SAAS;;;;"}