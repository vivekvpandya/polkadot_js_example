'use strict';

var pfunc = require('@zeitgeistpm/utility/dist/pfunc');
var Te = require('@zeitgeistpm/utility/dist/taskeither');
var types$1 = require('../../context/types.js');
var index$2 = require('./functions/create/index.js');
var index$1 = require('./functions/get/index.js');
var index = require('./functions/list/index.js');
var index$3 = require('./functions/getStage/index.js');
require('@polkadot/util');
require('@zeitgeistpm/rpc');
require('@zeitgeistpm/utility/dist/assert');
require('@zeitgeistpm/utility/dist/either');
require('@zeitgeistpm/utility/dist/error');
require('@zeitgeistpm/utility/dist/option');
require('@zeitgeistpm/utility/dist/time');
require('cids');
require('decimal.js');
require('rxjs');
require('rxjs/operators');
require('lodash-es');
require('../../primitives/ztg.js');
require('../../primitives/assetid.js');
require('../../primitives/blocknumber.js');
require('../../primitives/marketid.js');
require('@zeitgeistpm/utility/dist/null');
require('@zeitgeistpm/indexer');
require('@zeitgeistpm/utility/dist/array');
require('@zeitgeistpm/utility/dist/infinity');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var Te__namespace = /*#__PURE__*/_interopNamespaceDefault(Te);

/**
 * Create top level enriched zeitgeist Markets model.
 *
 * @generic C - Context
 * @param context C
 * @returns Markets<C>
 */
const model = (ctx) => {
    const markets = {
        list: (query) => index.list(ctx, query),
        get: pfunc.pfunc((query) => index$1.get(ctx, query), (types$1.isRpcContext(ctx)
            ? {
                $: (query) => index$1.observeMarket$(ctx, query),
            }
            : {})),
        create: (types$1.isRpcContext(ctx)
            ? pfunc.pfunc(Te__namespace.from(params => index$2.create(ctx, params)), {
                tx: (params) => index$2.transaction(ctx, params),
            })
            : undefined),
        getStage: (types$1.isRpcContext(ctx)
            ? async (market, time) => {
                return index$3.getStage(ctx, market, time);
            }
            : undefined),
    };
    return markets;
};

exports.model = model;
//# sourceMappingURL=index.js.map
