import * as O from '@zeitgeistpm/utility/dist/option';
import { Observable } from 'rxjs';
import { Context, IndexerContext, RpcContext } from '../../../../context';
import { MetadataStorage } from '../../../../meta';
import { RpcMarket } from '../../market';
import { Market } from '../../types';
import { MarketGetQuery } from './types';
/**
 * Fetch a market by its market id
 * Query capabilities and returned data differentiates between a rpc and indexer context.
 *
 * @generic C - Context
 * @param context C - the context to query inb
 * @param query MarketQuery
 * @returns Promise<Market<C>>
 */
export declare const get: <C extends Context<MS>, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../../meta").CommentMetadata>>(context: C, query: MarketGetQuery) => Promise<O.IOption<import("../../../..").Data<C, C extends RpcContext<MS> ? RpcMarket<C, MS> | import("../../market").SaturatedRpcMarket<C, MS> : never, C extends IndexerContext | import("../../../../context").FullContext<MS> ? import("../../market").IndexedMarket<C, MS> : never, MS>>>;
/**
 * Fetch market and stream changes from rpc.
 *
 * @param context RpcContext<MS>
 * @param query MarketGetQuery
 * @returns Observable<Market<RpcContext, MS>>
 */
export declare const observeMarket$: <C extends RpcContext<MS>, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../../meta").CommentMetadata>>(context: C, query: MarketGetQuery) => Observable<RpcMarket<C, MS>>;
//# sourceMappingURL=index.d.ts.map