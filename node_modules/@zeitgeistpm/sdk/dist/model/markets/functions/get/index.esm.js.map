{"version":3,"file":"index.esm.js","sources":["../../../../../src/model/markets/functions/get/index.ts"],"sourcesContent":["import * as O from '@zeitgeistpm/utility/dist/option'\nimport { Observable } from 'rxjs'\nimport {\n  Context,\n  IndexerContext,\n  isIndexerContext,\n  isRpcContext,\n  RpcContext,\n} from '../../../../context'\nimport { MetadataStorage } from '../../../../meta'\nimport { RpcMarket, rpcMarket } from '../../market'\nimport { attachMarketMethods, Market } from '../../types'\nimport { MarketGetQuery } from './types'\n\n/**\n * Fetch a market by its market id\n * Query capabilities and returned data differentiates between a rpc and indexer context.\n *\n * @generic C - Context\n * @param context C - the context to query inb\n * @param query MarketQuery\n * @returns Promise<Market<C>>\n */\nexport const get = async <C extends Context<MS>, MS extends MetadataStorage>(\n  context: C,\n  query: MarketGetQuery,\n): Promise<O.IOption<Market<C, MS>>> => {\n  if (isIndexerContext<MS>(context)) {\n    return getFromIndexer(context, query)\n  } else if (isRpcContext<MS>(context)) {\n    return getFromRpc<typeof context, MS>(context, query)\n  }\n  throw new Error('unrechable code detected.')\n}\n\n/**\n * Concrete get function for indexer context\n * @private\n */\nconst getFromIndexer = async <C extends IndexerContext, MS extends MetadataStorage>(\n  context: C,\n  query: MarketGetQuery,\n): Promise<O.IOption<Market<C, MS>>> => {\n  const {\n    markets: [market],\n  } = await context.indexer.markets({ where: { marketId_eq: query.marketId } })\n  if (market) {\n    return O.option(\n      O.some(\n        attachMarketMethods<typeof context, MS>(context, market as Market<C, MS>) as Market<\n          C,\n          MS\n        >,\n      ),\n    )\n  }\n  return O.option(O.none())\n}\n\n/**\n * Concrete get function for rpc context\n * @private\n */\nconst getFromRpc = async <C extends RpcContext<MS>, MS extends MetadataStorage>(\n  context: C,\n  query: MarketGetQuery,\n): Promise<O.IOption<Market<C, MS>>> => {\n  const market = await context.api.query.marketCommons.markets(query.marketId)\n  if (!market.isSome) O.option(O.none())\n  return O.option(O.some(rpcMarket<C, MS>(context, query.marketId, market.unwrap())))\n}\n\n/**\n * Fetch market and stream changes from rpc.\n *\n * @param context RpcContext<MS>\n * @param query MarketGetQuery\n * @returns Observable<Market<RpcContext, MS>>\n */\nexport const observeMarket$ = <C extends RpcContext<MS>, MS extends MetadataStorage>(\n  context: C,\n  query: MarketGetQuery,\n): Observable<RpcMarket<C, MS>> => {\n  return new Observable(subscription => {\n    const unsub = context.api.query.marketCommons.markets(query.marketId, market => {\n      if (!market.isSome) {\n        return subscription.unsubscribe()\n      }\n      subscription.next(rpcMarket<C, MS>(context, query.marketId, market.unwrap()))\n    })\n\n    return async () => {\n      subscription.unsubscribe()\n      unsub.then(unsub => unsub())\n    }\n  })\n}\n"],"names":[],"mappings":";;;;;;AAcA;;;;;;;;AAQG;AACU,MAAA,GAAG,GAAG,OACjB,OAAU,EACV,KAAqB,KACgB;AACrC,IAAA,IAAI,gBAAgB,CAAK,OAAO,CAAC,EAAE;AACjC,QAAA,OAAO,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;AACtC,KAAA;AAAM,SAAA,IAAI,YAAY,CAAK,OAAO,CAAC,EAAE;AACpC,QAAA,OAAO,UAAU,CAAqB,OAAO,EAAE,KAAK,CAAC,CAAA;AACtD,KAAA;AACD,IAAA,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;AAC9C,EAAC;AAED;;;AAGG;AACH,MAAM,cAAc,GAAG,OACrB,OAAU,EACV,KAAqB,KACgB;IACrC,MAAM,EACJ,OAAO,EAAE,CAAC,MAAM,CAAC,GAClB,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,WAAW,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA;AAC7E,IAAA,IAAI,MAAM,EAAE;AACV,QAAA,OAAO,CAAC,CAAC,MAAM,CACb,CAAC,CAAC,IAAI,CACJ,mBAAmB,CAAqB,OAAO,EAAE,MAAuB,CAGvE,CACF,CACF,CAAA;AACF,KAAA;IACD,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAA;AAC3B,CAAC,CAAA;AAED;;;AAGG;AACH,MAAM,UAAU,GAAG,OACjB,OAAU,EACV,KAAqB,KACgB;AACrC,IAAA,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;IAC5E,IAAI,CAAC,MAAM,CAAC,MAAM;QAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAA;IACtC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAQ,OAAO,EAAE,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAA;AACrF,CAAC,CAAA;AAED;;;;;;AAMG;MACU,cAAc,GAAG,CAC5B,OAAU,EACV,KAAqB,KACW;AAChC,IAAA,OAAO,IAAI,UAAU,CAAC,YAAY,IAAG;AACnC,QAAA,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,MAAM,IAAG;AAC7E,YAAA,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;AAClB,gBAAA,OAAO,YAAY,CAAC,WAAW,EAAE,CAAA;AAClC,aAAA;AACD,YAAA,YAAY,CAAC,IAAI,CAAC,SAAS,CAAQ,OAAO,EAAE,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC,CAAA;AAC/E,SAAC,CAAC,CAAA;QAEF,OAAO,YAAW;YAChB,YAAY,CAAC,WAAW,EAAE,CAAA;YAC1B,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,EAAE,CAAC,CAAA;AAC9B,SAAC,CAAA;AACH,KAAC,CAAC,CAAA;AACJ;;;;"}