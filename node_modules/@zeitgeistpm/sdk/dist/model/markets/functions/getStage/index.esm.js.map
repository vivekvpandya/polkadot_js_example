{"version":3,"file":"index.esm.js","sources":["../../../../../src/model/markets/functions/getStage/index.ts"],"sourcesContent":["import { infinity } from '@zeitgeistpm/utility/dist/infinity'\nimport * as O from '@zeitgeistpm/utility/dist/option'\nimport * as Time from '@zeitgeistpm/utility/dist/time'\nimport { Context, RpcContext } from '../../../../context'\nimport { now } from '../../../time/functions/now'\nimport { getDeadlines, getReportedAt, getStatus, Market, timespanOf } from '../../market'\nimport { MarketStage } from '../../marketstage'\n\n/**\n * Get the market stage for a market.\n * The market stage contains information about the current stage of the market lifecycle\n * and the total time of current the stage + estimated time remaining for the current stage.\n *\n * @param ctx Context\n * @param market Market<Context>\n * @param time ChainTime | undefined\n * @returns Promise<MarketStage>\n */\nexport const getStage = async (\n  ctx: RpcContext,\n  market: Market<Context>,\n  providedTime?: Time.ChainTime,\n): Promise<MarketStage> => {\n  const time = providedTime ?? (await now(ctx))\n  const status = getStatus(market)\n  const deadlines = getDeadlines(market)\n  const { start, end } = Time.asBlocks(time, timespanOf(market, time))\n\n  if (status === 'Proposed') {\n    return { type: 'Proposed', remainingTime: infinity, totalTime: infinity }\n  }\n\n  if (status === 'Active') {\n    return { type: 'Trading', remainingTime: end - time.now, totalTime: end - start }\n  }\n\n  if (status === 'Closed') {\n    const graceDuration = Time.toMs(time, { start: 0, end: deadlines.gracePeriod })\n    const oracleDuration = Time.toMs(time, { start: 0, end: deadlines.oracleDuration })\n    const oraclePeriodStarts = end + graceDuration\n    const oracleReportingEnds = oraclePeriodStarts + oracleDuration\n\n    //TODO: if market period is in blocks, use blocks to determine actual stage, time remainng and total time can still be calculated.\n\n    if (time.now < oraclePeriodStarts) {\n      return {\n        type: 'GracePeriod',\n        totalTime: graceDuration,\n        remainingTime: oraclePeriodStarts - time.now,\n      }\n    }\n\n    if (time.now < oracleReportingEnds) {\n      return {\n        type: 'OracleReportingPeriod',\n        remainingTime: oracleDuration - (time.now - oraclePeriodStarts),\n        totalTime: oracleDuration,\n      }\n    } else {\n      return {\n        type: 'OpenReportingPeriod',\n        remainingTime: infinity,\n        totalTime: infinity,\n      }\n    }\n  }\n\n  if (status === 'Reported') {\n    const disputeDuration = Time.toMs(time, { start: 0, end: deadlines.disputeDuration })\n    const reportedAtBlock = getReportedAt(market).unwrapOr(0)\n    const reportedAtTimestamp = Time.blockDate(time, reportedAtBlock).getTime()\n    const remainingTime = disputeDuration - (time.now - reportedAtTimestamp)\n\n    return { type: 'Reported', remainingTime, totalTime: disputeDuration }\n  }\n\n  if (status === 'Disputed') {\n    const report = await ctx.api.query.authorized.authorizedOutcomeReports(market.marketId)\n\n    if (!report.isEmpty) {\n      const block = await ctx.api.rpc.chain.getBlock(report.createdAtHash)\n      const reportedAtBlock = block.block.header.number.toNumber()\n      const reportedAtTimestamp = Time.blockDate(time, reportedAtBlock).getTime()\n\n      const correctionPeriod = O.tryCatch(\n        () => (ctx.api.consts.authorized as any)['correctionPeriod'].toNumber() as number,\n      ).unwrapOr(7200)\n\n      const correctionDuration = Time.toMs(time, { start: 0, end: correctionPeriod })\n      const remainingTime = correctionDuration - (time.now - reportedAtTimestamp)\n\n      return { type: 'AuthorizedReport', remainingTime, totalTime: correctionDuration }\n    }\n\n    return { type: 'Disputed', remainingTime: infinity, totalTime: infinity }\n  }\n\n  if (status === 'Resolved') {\n    return { type: 'Resolved', remainingTime: infinity, totalTime: infinity }\n  }\n\n  if (status === 'Destroyed') {\n    return { type: 'Destroyed', remainingTime: infinity, totalTime: infinity }\n  }\n\n  throw new Error(`Couldn't determine market stage by status ${status}`)\n}\n"],"names":[],"mappings":"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"}