import type { AddressOrPair } from '@polkadot/api/types';
import type { EventRecord } from '@polkadot/types/interfaces';
import * as E from '@zeitgeistpm/utility/dist/either';
import { FullContext, RpcContext } from '../../../../context';
import { MetadataStorage } from '../../../../meta';
import { RpcPool } from '../../../../model/swaps/pool';
import { RpcMarket } from '../../market';
import { CreateMarketParams, CreateMarketResult, CreateMarketTransaction } from './types';
/**
 * Create a market on chain.
 *
 * @generic C extends RpcContext<MS> | FullContext<MS>
 * @generic MS extends MetadataStorage
 * @param context C
 * @param params CreateMarketParams<C, MS>
 * @returns void
 */
export declare const create: <C extends RpcContext<MS>, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../../meta").CommentMetadata>>(context: C, params: CreateMarketParams<C, MS>) => Promise<CreateMarketResult<C, MS>>;
/**
 * Create lazy transaction for creating a market.
 *
 * @generic C extends RpcContext<MS> | FullContext<MS>
 * @generic MS extends MetadataStorage
 * @param context C
 * @param params CreateMarketParams<C, MS>
 * @returns CreateMarketTransaction
 */
export declare const transaction: <C extends RpcContext<MS>, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../../meta").CommentMetadata>>(context: C, params: CreateMarketParams<C, MS>) => Promise<CreateMarketTransaction>;
/**
 * Get the market creation event from the finalized block events.
 *
 * @private
 *
 * @param api ApiPromise
 * @param events EventRecord[]
 * @param address AddressOrPair
 */
export declare const extractMarketCreationEventForAddress: <C extends RpcContext<MS> | FullContext<MS>, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../../meta").CommentMetadata>>(ctx: C, events: EventRecord[], address: AddressOrPair) => E.IEither<Error, RpcMarket<C, MS>>;
/**
 * Get the pool creation event from the finalized block events.
 *
 * @private
 *
 * @param api ApiPromise
 * @param events EventRecord[]
 * @param marketId number
 */
export declare const extractPoolCreationEventForMarket: <C extends RpcContext<MS> | FullContext<MS>, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("../../../../meta").CommentMetadata>>(ctx: C, events: EventRecord[], marketId: number) => E.IEither<Error, RpcPool>;
//# sourceMappingURL=index.d.ts.map