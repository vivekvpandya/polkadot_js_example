{"version":3,"file":"index.esm.js","sources":["../../../../../src/model/markets/functions/create/index.ts"],"sourcesContent":["import type { AddressOrPair, SubmittableExtrinsic } from '@polkadot/api/types'\nimport type { EventRecord } from '@polkadot/types/interfaces'\nimport type { ISubmittableResult } from '@polkadot/types/types'\nimport { signAndSend } from '@zeitgeistpm/rpc'\nimport * as E from '@zeitgeistpm/utility/dist/either'\nimport * as Te from '@zeitgeistpm/utility/dist/taskeither'\nimport { FullContext, RpcContext } from '../../../../context'\nimport { MetadataStorage } from '../../../../meta'\nimport { RpcPool, rpcPool } from '../../../../model/swaps/pool'\nimport { RpcMarket, rpcMarket } from '../../market'\nimport {\n  CreateMarketData,\n  CreateMarketParams,\n  CreateMarketResult,\n  CreateMarketTransaction,\n  isWithPool,\n} from './types'\n\n/**\n * Create a market on chain.\n *\n * @generic C extends RpcContext<MS> | FullContext<MS>\n * @generic MS extends MetadataStorage\n * @param context C\n * @param params CreateMarketParams<C, MS>\n * @returns void\n */\nexport const create = async <C extends RpcContext<MS>, MS extends MetadataStorage>(\n  context: C,\n  params: CreateMarketParams<C, MS>,\n): Promise<CreateMarketResult<C, MS>> => {\n  const { tx, rollbackMetadata } = await transaction(context, params)\n  const response = signAndSend({\n    api: context.api,\n    tx,\n    signer: params.signer,\n    hooks: params.hooks,\n  })\n\n  const submittableResult = await response.unrightOr(error => {\n    rollbackMetadata()\n    throw error\n  })\n\n  const saturate = extraction(context, submittableResult, params)\n\n  return {\n    raw: submittableResult,\n    saturate,\n  }\n}\n\n/**\n * Create lazy transaction for creating a market.\n *\n * @generic C extends RpcContext<MS> | FullContext<MS>\n * @generic MS extends MetadataStorage\n * @param context C\n * @param params CreateMarketParams<C, MS>\n * @returns CreateMarketTransaction\n */\nexport const transaction = async <C extends RpcContext<MS>, MS extends MetadataStorage>(\n  context: C,\n  params: CreateMarketParams<C, MS>,\n): Promise<CreateMarketTransaction> => {\n  let tx: SubmittableExtrinsic<'promise', ISubmittableResult>\n\n  const storage = context.storage.of('markets')\n  const cid = await storage.put(params.metadata)\n\n  const rollbackMetadata = Te.from(async () => {\n    if (!context.storage) return\n    await context.storage.of('markets').del(cid)\n  })\n\n  if (isWithPool(params)) {\n    tx = context.api.tx.predictionMarkets.createCpmmMarketAndDeployAssets(\n      params.baseAsset,\n      params.oracle,\n      params.period,\n      params.deadlines,\n      { Sha3_384: cid.cid.multihash.bytes },\n      params.marketType,\n      params.disputeMechanism,\n      params.pool.swapFee,\n      params.pool.amount,\n      params.pool.weights,\n    )\n  } else {\n    tx = context.api.tx.predictionMarkets.createMarket(\n      params.baseAsset,\n      params.oracle,\n      params.period,\n      params.deadlines,\n      { Sha3_384: cid.cid.multihash.bytes },\n      params.creationType,\n      params.marketType,\n      params.disputeMechanism,\n      params.scoringRule === 'Cpmm' ? 'CPMM' : params.scoringRule ?? 'CPMM',\n    )\n  }\n\n  return {\n    tx,\n    rollbackMetadata,\n  }\n}\n\n/**\n * Lazily extract metadata from the market creation block.\n *\n * @generic MS extends MetadataStorage\n * @generic P extends CreateMarketParams<MS\n * @param context RpcContext<MS>\n * @param result ISubmittableResult\n * @param params P\n * @returns () => EitherInterface<Error, CreateMarketData<P>>\n */\nconst extraction =\n  <C extends RpcContext<MS> | FullContext<MS>, MS extends MetadataStorage>(\n    context: C,\n    result: ISubmittableResult,\n    params: CreateMarketParams<C, MS>,\n  ) =>\n  () =>\n    E.tryCatch<Error, CreateMarketData<C, MS, CreateMarketParams<C, MS>>>(() => {\n      const market = extractMarketCreationEventForAddress<C, MS>(\n        context,\n        result.events,\n        params.signer.address,\n      ).unwrap()\n\n      const pool = isWithPool(params)\n        ? extractPoolCreationEventForMarket(\n            context,\n            result.events,\n            market.marketId,\n          ).unwrap()\n        : undefined\n\n      return {\n        market,\n        pool,\n      } as CreateMarketData<C, MS, CreateMarketParams<C, MS>>\n    })\n\n/**\n * Get the market creation event from the finalized block events.\n *\n * @private\n *\n * @param api ApiPromise\n * @param events EventRecord[]\n * @param address AddressOrPair\n */\nexport const extractMarketCreationEventForAddress = <\n  C extends RpcContext<MS> | FullContext<MS>,\n  MS extends MetadataStorage,\n>(\n  ctx: C,\n  events: EventRecord[],\n  address: AddressOrPair,\n): E.IEither<Error, RpcMarket<C, MS>> =>\n  E.tryCatch(() => {\n    for (const { event } of events) {\n      if (ctx.api.events.predictionMarkets.MarketCreated.is(event)) {\n        const [id, , primitive] = event.data\n        if (primitive.creator.eq(address)) {\n          return rpcMarket<C, MS>(ctx, id, primitive) as RpcMarket<C, MS>\n        }\n      }\n    }\n    throw new Error('No market creation event found on finalized block. Should not happen.')\n  })\n\n/**\n * Get the pool creation event from the finalized block events.\n *\n * @private\n *\n * @param api ApiPromise\n * @param events EventRecord[]\n * @param marketId number\n */\nexport const extractPoolCreationEventForMarket = <\n  C extends RpcContext<MS> | FullContext<MS>,\n  MS extends MetadataStorage,\n>(\n  ctx: C,\n  events: EventRecord[],\n  marketId: number,\n): E.IEither<Error, RpcPool> =>\n  E.tryCatch(() => {\n    for (const { event } of events) {\n      if (ctx.api.events.swaps.PoolCreate.is(event)) {\n        const [{ poolId }, pool] = event.data\n        if (pool.marketId.eq(marketId)) {\n          return rpcPool(ctx, poolId.toNumber(), pool)\n        }\n      }\n    }\n    throw new Error(\n      'No pool creation event found on finalized block. Should not happen when creating with pool.',\n    )\n  })\n"],"names":[],"mappings":";;;;;;;AAkBA;;;;;;;;AAQG;AACU,MAAA,MAAM,GAAG,OACpB,OAAU,EACV,MAAiC,KACK;AACtC,IAAA,MAAM,EAAE,EAAE,EAAE,gBAAgB,EAAE,GAAG,MAAM,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;IACnE,MAAM,QAAQ,GAAG,WAAW,CAAC;QAC3B,GAAG,EAAE,OAAO,CAAC,GAAG;QAChB,EAAE;QACF,MAAM,EAAE,MAAM,CAAC,MAAM;QACrB,KAAK,EAAE,MAAM,CAAC,KAAK;AACpB,KAAA,CAAC,CAAA;IAEF,MAAM,iBAAiB,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,KAAK,IAAG;AACzD,QAAA,gBAAgB,EAAE,CAAA;AAClB,QAAA,MAAM,KAAK,CAAA;AACb,KAAC,CAAC,CAAA;IAEF,MAAM,QAAQ,GAAG,UAAU,CAAC,OAAO,EAAE,iBAAiB,EAAE,MAAM,CAAC,CAAA;IAE/D,OAAO;AACL,QAAA,GAAG,EAAE,iBAAiB;QACtB,QAAQ;KACT,CAAA;AACH,EAAC;AAED;;;;;;;;AAQG;AACU,MAAA,WAAW,GAAG,OACzB,OAAU,EACV,MAAiC,KACG;AACpC,IAAA,IAAI,EAAuD,CAAA;IAE3D,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,CAAC,CAAA;IAC7C,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;IAE9C,MAAM,gBAAgB,GAAG,EAAE,CAAC,IAAI,CAAC,YAAW;QAC1C,IAAI,CAAC,OAAO,CAAC,OAAO;YAAE,OAAM;AAC5B,QAAA,MAAM,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;AAC9C,KAAC,CAAC,CAAA;AAEF,IAAA,IAAI,UAAU,CAAC,MAAM,CAAC,EAAE;AACtB,QAAA,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,iBAAiB,CAAC,+BAA+B,CACnE,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,SAAS,EAChB,EAAE,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,EACrC,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,gBAAgB,EACvB,MAAM,CAAC,IAAI,CAAC,OAAO,EACnB,MAAM,CAAC,IAAI,CAAC,MAAM,EAClB,MAAM,CAAC,IAAI,CAAC,OAAO,CACpB,CAAA;AACF,KAAA;AAAM,SAAA;AACL,QAAA,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,iBAAiB,CAAC,YAAY,CAChD,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,SAAS,EAChB,EAAE,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,EACrC,MAAM,CAAC,YAAY,EACnB,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,gBAAgB,EACvB,MAAM,CAAC,WAAW,KAAK,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,IAAI,MAAM,CACtE,CAAA;AACF,KAAA;IAED,OAAO;QACL,EAAE;QACF,gBAAgB;KACjB,CAAA;AACH,EAAC;AAED;;;;;;;;;AASG;AACH,MAAM,UAAU,GACd,CACE,OAAU,EACV,MAA0B,EAC1B,MAAiC,KAEnC,MACE,CAAC,CAAC,QAAQ,CAA4D,MAAK;AACzE,IAAA,MAAM,MAAM,GAAG,oCAAoC,CACjD,OAAO,EACP,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,MAAM,CAAC,OAAO,CACtB,CAAC,MAAM,EAAE,CAAA;AAEV,IAAA,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC;AAC7B,UAAE,iCAAiC,CAC/B,OAAO,EACP,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,QAAQ,CAChB,CAAC,MAAM,EAAE;UACV,SAAS,CAAA;IAEb,OAAO;QACL,MAAM;QACN,IAAI;KACiD,CAAA;AACzD,CAAC,CAAC,CAAA;AAEN;;;;;;;;AAQG;AACU,MAAA,oCAAoC,GAAG,CAIlD,GAAM,EACN,MAAqB,EACrB,OAAsB,KAEtB,CAAC,CAAC,QAAQ,CAAC,MAAK;AACd,IAAA,KAAK,MAAM,EAAE,KAAK,EAAE,IAAI,MAAM,EAAE;AAC9B,QAAA,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,aAAa,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;YAC5D,MAAM,CAAC,EAAE,IAAI,SAAS,CAAC,GAAG,KAAK,CAAC,IAAI,CAAA;YACpC,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE;gBACjC,OAAO,SAAS,CAAQ,GAAG,EAAE,EAAE,EAAE,SAAS,CAAqB,CAAA;AAChE,aAAA;AACF,SAAA;AACF,KAAA;AACD,IAAA,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAA;AAC1F,CAAC,EAAC;AAEJ;;;;;;;;AAQG;AACU,MAAA,iCAAiC,GAAG,CAI/C,GAAM,EACN,MAAqB,EACrB,QAAgB,KAEhB,CAAC,CAAC,QAAQ,CAAC,MAAK;AACd,IAAA,KAAK,MAAM,EAAE,KAAK,EAAE,IAAI,MAAM,EAAE;AAC9B,QAAA,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;YAC7C,MAAM,CAAC,EAAE,MAAM,EAAE,EAAE,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAA;YACrC,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE;gBAC9B,OAAO,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAA;AAC7C,aAAA;AACF,SAAA;AACF,KAAA;AACD,IAAA,MAAM,IAAI,KAAK,CACb,6FAA6F,CAC9F,CAAA;AACH,CAAC;;;;"}