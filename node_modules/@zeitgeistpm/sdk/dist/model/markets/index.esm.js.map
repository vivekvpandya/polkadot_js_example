{"version":3,"file":"index.esm.js","sources":["../../../src/model/markets/index.ts"],"sourcesContent":["import { pfunc } from '@zeitgeistpm/utility/dist/pfunc'\nimport * as Te from '@zeitgeistpm/utility/dist/taskeither'\nimport { ChainTime } from '@zeitgeistpm/utility/dist/time'\nimport { Context, isRpcContext } from '../../context'\nimport { MetadataStorage } from '../../meta'\nimport { create, transaction } from './functions/create'\nimport { get, observeMarket$ } from './functions/get'\nimport { MarketGetQuery } from './functions/get/types'\nimport { list } from './functions/list'\nimport { getStage } from './functions/getStage'\nimport { MarketStage } from './marketstage'\nimport {\n  CreateMarketParams,\n  Markets,\n  MarketsListQuery,\n  CreateMarketResult,\n  Market,\n} from './types'\n\nexport * from './types'\n\n/**\n * Create top level enriched zeitgeist Markets model.\n *\n * @generic C - Context\n * @param context C\n * @returns Markets<C>\n */\nexport const model = <C extends Context<MS>, MS extends MetadataStorage>(\n  ctx: C,\n): Markets<C, MS> => {\n  const markets: Markets<C, MS> = {\n    list: (query?: MarketsListQuery<C>) => list(ctx, query),\n    get: pfunc(\n      (query: MarketGetQuery) => get<typeof ctx, MS>(ctx, query),\n      (isRpcContext<MS>(ctx)\n        ? {\n            $: (query: MarketGetQuery) => observeMarket$<typeof ctx, MS>(ctx, query),\n          }\n        : {}) as Markets<typeof ctx, MS>['get'],\n    ),\n    create: (isRpcContext<MS>(ctx)\n      ? pfunc(\n          Te.from<\n            CreateMarketResult<typeof ctx, MS>,\n            Error,\n            [params: CreateMarketParams<typeof ctx, MS>]\n          >(params => create<typeof ctx, MS>(ctx, params)),\n          {\n            tx: (params: CreateMarketParams<typeof ctx, MS>) =>\n              transaction<typeof ctx, MS>(ctx, params),\n          },\n        )\n      : undefined) as Markets<typeof ctx, MS>['create'],\n\n    getStage: (isRpcContext<MS>(ctx)\n      ? async (market: Market<Context>, time?: ChainTime): Promise<MarketStage> => {\n          return getStage(ctx, market, time)\n        }\n      : undefined) as Markets<typeof ctx, MS>['getStage'],\n  }\n\n  return markets\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;AAMG;AACU,MAAA,KAAK,GAAG,CACnB,GAAM,KACY;AAClB,IAAA,MAAM,OAAO,GAAmB;QAC9B,IAAI,EAAE,CAAC,KAA2B,KAAK,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC;AACvD,QAAA,GAAG,EAAE,KAAK,CACR,CAAC,KAAqB,KAAK,GAAG,CAAiB,GAAG,EAAE,KAAK,CAAC,GACzD,YAAY,CAAK,GAAG,CAAC;AACpB,cAAE;gBACE,CAAC,EAAE,CAAC,KAAqB,KAAK,cAAc,CAAiB,GAAG,EAAE,KAAK,CAAC;AACzE,aAAA;cACD,EAAE,EACP;AACD,QAAA,MAAM,GAAG,YAAY,CAAK,GAAG,CAAC;AAC5B,cAAE,KAAK,CACH,EAAE,CAAC,IAAI,CAIL,MAAM,IAAI,MAAM,CAAiB,GAAG,EAAE,MAAM,CAAC,CAAC,EAChD;gBACE,EAAE,EAAE,CAAC,MAA0C,KAC7C,WAAW,CAAiB,GAAG,EAAE,MAAM,CAAC;aAC3C,CACF;cACD,SAAS,CAAsC;AAEnD,QAAA,QAAQ,GAAG,YAAY,CAAK,GAAG,CAAC;AAC9B,cAAE,OAAO,MAAuB,EAAE,IAAgB,KAA0B;gBACxE,OAAO,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAA;aACnC;cACD,SAAS,CAAwC;KACtD,CAAA;AAED,IAAA,OAAO,OAAO,CAAA;AAChB;;;;"}