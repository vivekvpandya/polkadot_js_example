import { Infinity } from '@zeitgeistpm/utility/dist/infinity';
/**
 * Union type of all possible market stages.
 */
export declare type MarketStage = Proposed | Trading | GracePeriod | OracleReportingPeriod | OpenReportingPeriod | Reported | Disputed | AuthorizedReport | Resolved | Destroyed;
/**
 * The market has been proposed and is waiting to be approved.
 */
export declare type Proposed = InfiniteStage<'Proposed'>;
/**
 * The market is active and trading.
 */
export declare type Trading = DynamicStage<'Trading'>;
/**
 * The market has been closed and is in the grace period awaiting to go into its reporting stage.
 */
export declare type GracePeriod = DynamicStage<'GracePeriod'>;
/**
 * The market is in its reporting stage where oracle reports are accepted.
 */
export declare type OracleReportingPeriod = DynamicStage<'OracleReportingPeriod'>;
/**
 * The market is in its reporting stage where reports from anyone are accepted.
 */
export declare type OpenReportingPeriod = InfiniteStage<'OpenReportingPeriod'>;
/**
 * The market has been reported and will be resolved if no dispute is raised.
 */
export declare type Reported = DynamicStage<'Reported'>;
/**
 * The market has been disputed and is awaiting an authorized report.
 */
export declare type Disputed = InfiniteStage<'Disputed'>;
/**
 * The market has an authorized report and is awaiting resolution after the CorrectionDuration has expired..
 */
export declare type AuthorizedReport = DynamicStage<'AuthorizedReport'>;
/**
 * The market has been resolved.
 */
export declare type Resolved = InfiniteStage<'Resolved'>;
/**
 * The market has been destroyed.
 */
export declare type Destroyed = InfiniteStage<'Destroyed'>;
/**
 * A stage with a dynamic remaining time.
 */
export declare type DynamicStage<T> = {
    type: T;
    remainingTime: number;
    totalTime: number;
};
/**
 * A stage with an infinite remaining time.
 */
export declare type InfiniteStage<T> = {
    type: T;
    remainingTime: Infinity;
    totalTime: Infinity;
};
/**
 * Check if a stage is a InfiniteStage.
 *
 * @param stage MarketStage
 * @returns stage is InfiniteStage<any>
 */
export declare const isInfinite: (stage: MarketStage) => stage is InfiniteStage<any>;
//# sourceMappingURL=marketstage.d.ts.map