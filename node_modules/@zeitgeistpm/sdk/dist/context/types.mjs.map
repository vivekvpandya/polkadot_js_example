{"version":3,"file":"types.mjs","sources":["../../src/context/types.ts"],"sourcesContent":["import type { ApiPromise, WsProvider } from '@polkadot/api'\nimport type { ZeitgeistIndexer } from '@zeitgeistpm/indexer'\nimport type { MetadataStorage } from '../meta/types'\n\n/**\n * Union type that can be either rpc, indexer or full context.\n */\nexport type Context<MS extends MetadataStorage = MetadataStorage> =\n  | IndexerContext\n  | RpcContext<MS>\n  | FullContext<MS>\n\n/**\n * Zeitgeist SDK context with both rpc and indexer features enabled.\n */\nexport type FullContext<MS extends MetadataStorage = MetadataStorage> = RpcContext<MS> &\n  IndexerContext\n\n/**\n * Zeitgeist SDK context with rpc and storage features enabled.\n */\nexport type RpcContext<MS extends MetadataStorage = MetadataStorage> = {\n  readonly api: ApiPromise\n  readonly provider: WsProvider\n  readonly storage: MS\n}\n\n/**\n * Zeitgeist SDK context with indexer features enabled.\n */\nexport type IndexerContext = {\n  readonly indexer: ZeitgeistIndexer\n}\n\n/**\n * Typeguard for full context\n *\n * @param ctx unknown\n * @returns config is FullContext\n */\nexport const isFullContext = <MS extends MetadataStorage>(\n  ctx?: unknown,\n): ctx is FullContext<MS> => isRpcContext(ctx) && isIndexerContext(ctx)\n\n/**\n * Typeguard for rpc context\n *\n * @param ctx unknown\n * @returns config is RpcContext\n */\nexport const isRpcContext = <MS extends MetadataStorage>(\n  ctx?: unknown,\n): ctx is RpcContext<MS> =>\n  Boolean(ctx && typeof ctx === 'object' && ctx !== null && 'api' in ctx)\n\n/**\n * Typeguard for indexer context\n *\n * @param ctx unknown\n * @returns config is IndexerContext\n */\nexport const isIndexerContext = <MS extends MetadataStorage>(\n  ctx?: unknown,\n): ctx is IndexerContext =>\n  Boolean(ctx && typeof ctx === 'object' && ctx !== null && 'indexer' in ctx)\n\n/**\n * Teardown a context. Only applicable to rpc context for disconnection ws.\n *\n * @param ctx Context<MS>\n */\nexport const teardown = <MS extends MetadataStorage>(ctx: Context<MS>) => {\n  if (isRpcContext(ctx)) {\n    ctx.provider.disconnect()\n  }\n}\n"],"names":[],"mappings":"AAkCA;;;;;AAKG;AACU,MAAA,aAAa,GAAG,CAC3B,GAAa,KACc,YAAY,CAAC,GAAG,CAAC,IAAI,gBAAgB,CAAC,GAAG,EAAC;AAEvE;;;;;AAKG;AACU,MAAA,YAAY,GAAG,CAC1B,GAAa,KAEb,OAAO,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG,EAAC;AAEzE;;;;;AAKG;AACU,MAAA,gBAAgB,GAAG,CAC9B,GAAa,KAEb,OAAO,CAAC,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,IAAI,SAAS,IAAI,GAAG,EAAC;AAE7E;;;;AAIG;AACU,MAAA,QAAQ,GAAG,CAA6B,GAAgB,KAAI;AACvE,IAAA,IAAI,YAAY,CAAC,GAAG,CAAC,EAAE;AACrB,QAAA,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAA;AAC1B,KAAA;AACH;;;;"}