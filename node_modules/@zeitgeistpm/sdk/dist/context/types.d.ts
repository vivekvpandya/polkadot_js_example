import type { ApiPromise, WsProvider } from '@polkadot/api';
import type { ZeitgeistIndexer } from '@zeitgeistpm/indexer';
import type { MetadataStorage } from '../meta/types';
/**
 * Union type that can be either rpc, indexer or full context.
 */
export declare type Context<MS extends MetadataStorage = MetadataStorage> = IndexerContext | RpcContext<MS> | FullContext<MS>;
/**
 * Zeitgeist SDK context with both rpc and indexer features enabled.
 */
export declare type FullContext<MS extends MetadataStorage = MetadataStorage> = RpcContext<MS> & IndexerContext;
/**
 * Zeitgeist SDK context with rpc and storage features enabled.
 */
export declare type RpcContext<MS extends MetadataStorage = MetadataStorage> = {
    readonly api: ApiPromise;
    readonly provider: WsProvider;
    readonly storage: MS;
};
/**
 * Zeitgeist SDK context with indexer features enabled.
 */
export declare type IndexerContext = {
    readonly indexer: ZeitgeistIndexer;
};
/**
 * Typeguard for full context
 *
 * @param ctx unknown
 * @returns config is FullContext
 */
export declare const isFullContext: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("..").CommentMetadata>>(ctx?: unknown) => ctx is FullContext<MS>;
/**
 * Typeguard for rpc context
 *
 * @param ctx unknown
 * @returns config is RpcContext
 */
export declare const isRpcContext: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("..").CommentMetadata>>(ctx?: unknown) => ctx is RpcContext<MS>;
/**
 * Typeguard for indexer context
 *
 * @param ctx unknown
 * @returns config is IndexerContext
 */
export declare const isIndexerContext: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("..").CommentMetadata>>(ctx?: unknown) => ctx is IndexerContext;
/**
 * Teardown a context. Only applicable to rpc context for disconnection ws.
 *
 * @param ctx Context<MS>
 */
export declare const teardown: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("..").CommentMetadata>>(ctx: Context<MS>) => void;
//# sourceMappingURL=types.d.ts.map