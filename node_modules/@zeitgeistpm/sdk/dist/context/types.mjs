/**
 * Typeguard for full context
 *
 * @param ctx unknown
 * @returns config is FullContext
 */
const isFullContext = (ctx) => isRpcContext(ctx) && isIndexerContext(ctx);
/**
 * Typeguard for rpc context
 *
 * @param ctx unknown
 * @returns config is RpcContext
 */
const isRpcContext = (ctx) => Boolean(ctx && typeof ctx === 'object' && ctx !== null && 'api' in ctx);
/**
 * Typeguard for indexer context
 *
 * @param ctx unknown
 * @returns config is IndexerContext
 */
const isIndexerContext = (ctx) => Boolean(ctx && typeof ctx === 'object' && ctx !== null && 'indexer' in ctx);
/**
 * Teardown a context. Only applicable to rpc context for disconnection ws.
 *
 * @param ctx Context<MS>
 */
const teardown = (ctx) => {
    if (isRpcContext(ctx)) {
        ctx.provider.disconnect();
    }
};

export { isFullContext, isIndexerContext, isRpcContext, teardown };
//# sourceMappingURL=types.mjs.map
