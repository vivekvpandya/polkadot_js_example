{"version":3,"file":"types.js","sources":["../src/types.ts"],"sourcesContent":["import { isNull } from '@polkadot/util'\nimport {\n  Context,\n  FullContext,\n  IndexerContext,\n  isIndexerContext,\n  isRpcContext,\n  RpcContext,\n} from './context/types.js'\nimport { MetadataStorage } from './meta/index.js'\nimport { Model, model } from './model/index.js'\n\nexport * from './config/types.js'\nexport * from './context/types.js'\nexport * from './model/types.js'\n\n/**\n * Top level Zeitgeist SDK type.\n */\nexport type Sdk<C extends Context<MS>, MS extends MetadataStorage = MetadataStorage> = C & {\n  /**\n   * The context that was used to create the sdk.\n   * Used for internal type narrowing to work correctly..\n   *\n   * @private - pseudo private property\n   */\n  readonly __context: C\n  /**\n   * Enriched zeitgeist models with features for qyerying data on chain and indexer,\n   * and for creating transaction flows with for example richer validation to ensure that\n   * the markets you have the official standard of metadata so that they show up in the official frontend.\n   */\n  readonly model: Model<C, MS>\n}\n\n/**\n * Utility for creating a new SDK.\n *\n * @generic C extends Context<MS>\n * @generic MS extends MetadataStorage = MetadataStorage\n * @param context C\n * @returns Sdk<C, MS>\n */\nexport const sdk = <C extends Context<MS>, MS extends MetadataStorage = MetadataStorage>(\n  context: C,\n): Sdk<C, MS> => {\n  let instance = {\n    __context: context,\n    ...context,\n    model: model(context),\n  } as Sdk<C, MS>\n\n  return instance\n}\n\n/**\n * Typeguard for full sdk.\n *\n * @param sdk\n * @returns sdk is Sdk<FullContext>\n */\nexport const isFullSdk = <MS extends MetadataStorage>(\n  sdk: unknown,\n): sdk is Sdk<FullContext<MS>, MS> => isIndexedSdk(sdk) && isRpcSdk(sdk)\n\n/**\n * Typeguard for indexer sdk.\n *\n * @param sdk\n * @returns sdk is Sdk<IndexerContext>\n */\nexport const isIndexedSdk = <MS extends MetadataStorage>(\n  sdk: any,\n): sdk is Sdk<IndexerContext, MS> => !isNull(sdk) && sdk && isIndexerContext(sdk.__context)\n\n/**\n * Typeguard for rpc sdk.\n *\n * @param sdk\n * @returns sdk is Sdk<RpcContext>\n */\nexport const isRpcSdk = <MS extends MetadataStorage>(\n  sdk: any,\n): sdk is Sdk<RpcContext<MS>, MS> =>\n  Boolean(!isNull(sdk) && isRpcContext<MS>(sdk.__context))\n"],"names":["model","isNull","isIndexerContext","isRpcContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;AAOG;AACU,MAAA,GAAG,GAAG,CACjB,OAAU,KACI;AACd,IAAA,IAAI,QAAQ,GAAG;AACb,QAAA,SAAS,EAAE,OAAO;AAClB,QAAA,GAAG,OAAO;AACV,QAAA,KAAK,EAAEA,aAAK,CAAC,OAAO,CAAC;KACR,CAAA;AAEf,IAAA,OAAO,QAAQ,CAAA;AACjB,EAAC;AAED;;;;;AAKG;AACU,MAAA,SAAS,GAAG,CACvB,GAAY,KACwB,YAAY,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,GAAG,EAAC;AAExE;;;;;AAKG;MACU,YAAY,GAAG,CAC1B,GAAQ,KAC2B,CAACC,WAAM,CAAC,GAAG,CAAC,IAAI,GAAG,IAAIC,wBAAgB,CAAC,GAAG,CAAC,SAAS,EAAC;AAE3F;;;;;AAKG;AACU,MAAA,QAAQ,GAAG,CACtB,GAAQ,KAER,OAAO,CAAC,CAACD,WAAM,CAAC,GAAG,CAAC,IAAIE,oBAAY,CAAK,GAAG,CAAC,SAAS,CAAC;;;;;;;;;;;;;;;;;;;"}