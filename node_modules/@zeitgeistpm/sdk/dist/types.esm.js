import { isNull } from '@polkadot/util';
import { isIndexerContext, isRpcContext } from './context/types.esm.js';
export { isFullContext, isIndexerContext, isRpcContext, teardown } from './context/types.esm.js';
import { model } from './model/index.esm.js';
export { batterystation, batterystationIndexer, batterystationRpc, indexers, mainnet, mainnetIndexer, mainnetRpc, rpcs } from './config/known/index.esm.js';
import '@zeitgeistpm/rpc';
import '@zeitgeistpm/utility/dist/assert';
import '@zeitgeistpm/utility/dist/either';
import '@zeitgeistpm/utility/dist/error';
import '@zeitgeistpm/utility/dist/option';
import '@zeitgeistpm/utility/dist/taskeither';
import '@zeitgeistpm/utility/dist/time';
import 'cids';
import 'decimal.js';
import 'rxjs';
import 'rxjs/operators';
import 'lodash-es';
import './primitives/ztg.esm.js';
import './primitives/assetid.esm.js';
import './primitives/blocknumber.esm.js';
import './primitives/marketid.esm.js';
import '@zeitgeistpm/utility/dist/null';
import '@zeitgeistpm/indexer';
import '@zeitgeistpm/utility/dist/array';
import '@zeitgeistpm/utility/dist/infinity';

/**
 * Utility for creating a new SDK.
 *
 * @generic C extends Context<MS>
 * @generic MS extends MetadataStorage = MetadataStorage
 * @param context C
 * @returns Sdk<C, MS>
 */
const sdk = (context) => {
    let instance = {
        __context: context,
        ...context,
        model: model(context),
    };
    return instance;
};
/**
 * Typeguard for full sdk.
 *
 * @param sdk
 * @returns sdk is Sdk<FullContext>
 */
const isFullSdk = (sdk) => isIndexedSdk(sdk) && isRpcSdk(sdk);
/**
 * Typeguard for indexer sdk.
 *
 * @param sdk
 * @returns sdk is Sdk<IndexerContext>
 */
const isIndexedSdk = (sdk) => !isNull(sdk) && sdk && isIndexerContext(sdk.__context);
/**
 * Typeguard for rpc sdk.
 *
 * @param sdk
 * @returns sdk is Sdk<RpcContext>
 */
const isRpcSdk = (sdk) => Boolean(!isNull(sdk) && isRpcContext(sdk.__context));

export { isFullSdk, isIndexedSdk, isRpcSdk, sdk };
//# sourceMappingURL=types.esm.js.map
