'use strict';

var index = require('./known/index.js');

/**
 * Force a config to indexer config.
 *
 * @param config FullConfig<MS>
 * @returns IndexerConfig
 */
const asIndexerConfig = (config) => ({
    indexer: config.indexer,
    connectionRetries: config.connectionRetries,
    debug: config.debug,
});
/**
 * Force a config to rpc config.
 *
 * @param config FullConfig<MS>
 * @returns RpcConfig<MS>
 */
const asRpcConfig = (config) => ({
    provider: config.provider,
    storage: config.storage,
    connectionRetries: config.connectionRetries,
    debug: config.debug,
});
/**
 * Typeguard for full configs.
 *
 * @param config Config<MS>
 * @returns is FullConfig<MS>
 */
const isFullConfig = (config) => isRpcConfig(config) && isIndexerConfig(config);
/**
 * Typeguard for rpc configs.
 *
 * @param config Config<MS>
 * @returns is RpcConfig<MS>
 */
const isRpcConfig = (config) => Boolean(config && 'provider' in config);
/**
 * Typeguard for indexer configs.
 *
 * @param config Config<MS>
 * @returns is IndexerConfig<MS>
 */
const isIndexerConfig = (config) => Boolean(config && 'indexer' in config && typeof config.indexer === 'string');

exports.batterystation = index.batterystation;
exports.batterystationIndexer = index.batterystationIndexer;
exports.batterystationRpc = index.batterystationRpc;
exports.indexers = index.indexers;
exports.mainnet = index.mainnet;
exports.mainnetIndexer = index.mainnetIndexer;
exports.mainnetRpc = index.mainnetRpc;
exports.rpcs = index.rpcs;
exports.asIndexerConfig = asIndexerConfig;
exports.asRpcConfig = asRpcConfig;
exports.isFullConfig = isFullConfig;
exports.isIndexerConfig = isIndexerConfig;
exports.isRpcConfig = isRpcConfig;
//# sourceMappingURL=types.js.map
