export { batterystation, batterystationIndexer, batterystationRpc, indexers, mainnet, mainnetIndexer, mainnetRpc, rpcs } from './known/index.mjs';

/**
 * Force a config to indexer config.
 *
 * @param config FullConfig<MS>
 * @returns IndexerConfig
 */
const asIndexerConfig = (config) => ({
    indexer: config.indexer,
    connectionRetries: config.connectionRetries,
    debug: config.debug,
});
/**
 * Force a config to rpc config.
 *
 * @param config FullConfig<MS>
 * @returns RpcConfig<MS>
 */
const asRpcConfig = (config) => ({
    provider: config.provider,
    storage: config.storage,
    connectionRetries: config.connectionRetries,
    debug: config.debug,
});
/**
 * Typeguard for full configs.
 *
 * @param config Config<MS>
 * @returns is FullConfig<MS>
 */
const isFullConfig = (config) => isRpcConfig(config) && isIndexerConfig(config);
/**
 * Typeguard for rpc configs.
 *
 * @param config Config<MS>
 * @returns is RpcConfig<MS>
 */
const isRpcConfig = (config) => Boolean(config && 'provider' in config);
/**
 * Typeguard for indexer configs.
 *
 * @param config Config<MS>
 * @returns is IndexerConfig<MS>
 */
const isIndexerConfig = (config) => Boolean(config && 'indexer' in config && typeof config.indexer === 'string');

export { asIndexerConfig, asRpcConfig, isFullConfig, isIndexerConfig, isRpcConfig };
//# sourceMappingURL=types.mjs.map
