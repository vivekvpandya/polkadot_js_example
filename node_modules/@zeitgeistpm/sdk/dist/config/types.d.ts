import type { MetadataStorage } from '../meta/types';
export * from './known';
/**
 * Union type of possible configurations.
 */
export declare type Config<MS extends MetadataStorage> = FullConfig<MS> | RpcConfig<MS> | IndexerConfig;
export declare type BaseConfig = {
    /**
     * Enable verbose debugging of connection.
     */
    debug?: boolean;
    /**
     * How many retries if connecting errors.
     */
    connectionRetries?: number;
};
export declare type FullConfig<MS extends MetadataStorage> = RpcConfig<MS> & IndexerConfig;
export declare type RpcConfig<MS extends MetadataStorage> = BaseConfig & {
    /**
     * Rpc provider(s), uri or list of uris.
     */
    provider: string | string[];
    /**
     * Storage provider for metadata
     */
    storage: MS;
};
export declare type IndexerConfig = BaseConfig & {
    /**
     * The uri for the indexer gql endpoint.
     */
    indexer: string;
};
/**
 * Force a config to indexer config.
 *
 * @param config FullConfig<MS>
 * @returns IndexerConfig
 */
export declare const asIndexerConfig: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("..").CommentMetadata>>(config: FullConfig<MS>) => IndexerConfig;
/**
 * Force a config to rpc config.
 *
 * @param config FullConfig<MS>
 * @returns RpcConfig<MS>
 */
export declare const asRpcConfig: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("..").CommentMetadata>>(config: FullConfig<MS>) => RpcConfig<MS>;
/**
 * Typeguard for full configs.
 *
 * @param config Config<MS>
 * @returns is FullConfig<MS>
 */
export declare const isFullConfig: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("..").CommentMetadata>>(config: Config<MS>) => config is FullConfig<MS>;
/**
 * Typeguard for rpc configs.
 *
 * @param config Config<MS>
 * @returns is RpcConfig<MS>
 */
export declare const isRpcConfig: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("..").CommentMetadata>>(config?: Config<MS> | undefined) => config is RpcConfig<MS>;
/**
 * Typeguard for indexer configs.
 *
 * @param config Config<MS>
 * @returns is IndexerConfig<MS>
 */
export declare const isIndexerConfig: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("..").CommentMetadata>>(config?: Config<MS> | undefined) => config is IndexerConfig;
//# sourceMappingURL=types.d.ts.map