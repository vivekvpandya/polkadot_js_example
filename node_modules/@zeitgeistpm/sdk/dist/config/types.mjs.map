{"version":3,"file":"types.mjs","sources":["../../src/config/types.ts"],"sourcesContent":["import type { MetadataStorage } from '../meta/types'\n\nexport * from './known'\n\n/**\n * Union type of possible configurations.\n */\nexport type Config<MS extends MetadataStorage> =\n  | FullConfig<MS>\n  | RpcConfig<MS>\n  | IndexerConfig\n\nexport type BaseConfig = {\n  /**\n   * Enable verbose debugging of connection.\n   */\n  debug?: boolean\n  /**\n   * How many retries if connecting errors.\n   */\n  connectionRetries?: number\n}\n\nexport type FullConfig<MS extends MetadataStorage> = RpcConfig<MS> & IndexerConfig\n\nexport type RpcConfig<MS extends MetadataStorage> = BaseConfig & {\n  /**\n   * Rpc provider(s), uri or list of uris.\n   */\n  provider: string | string[]\n  /**\n   * Storage provider for metadata\n   */\n  storage: MS\n}\n\nexport type IndexerConfig = BaseConfig & {\n  /**\n   * The uri for the indexer gql endpoint.\n   */\n  indexer: string\n}\n\n/**\n * Force a config to indexer config.\n *\n * @param config FullConfig<MS>\n * @returns IndexerConfig\n */\nexport const asIndexerConfig = <MS extends MetadataStorage>(\n  config: FullConfig<MS>,\n): IndexerConfig => ({\n  indexer: config.indexer,\n  connectionRetries: config.connectionRetries,\n  debug: config.debug,\n})\n\n/**\n * Force a config to rpc config.\n *\n * @param config FullConfig<MS>\n * @returns RpcConfig<MS>\n */\nexport const asRpcConfig = <MS extends MetadataStorage>(\n  config: FullConfig<MS>,\n): RpcConfig<MS> => ({\n  provider: config.provider,\n  storage: config.storage,\n  connectionRetries: config.connectionRetries,\n  debug: config.debug,\n})\n\n/**\n * Typeguard for full configs.\n *\n * @param config Config<MS>\n * @returns is FullConfig<MS>\n */\nexport const isFullConfig = <MS extends MetadataStorage>(\n  config: Config<MS>,\n): config is FullConfig<MS> => isRpcConfig(config) && isIndexerConfig(config)\n\n/**\n * Typeguard for rpc configs.\n *\n * @param config Config<MS>\n * @returns is RpcConfig<MS>\n */\nexport const isRpcConfig = <MS extends MetadataStorage>(\n  config?: Config<MS>,\n): config is RpcConfig<MS> => Boolean(config && 'provider' in config)\n\n/**\n * Typeguard for indexer configs.\n *\n * @param config Config<MS>\n * @returns is IndexerConfig<MS>\n */\nexport const isIndexerConfig = <MS extends MetadataStorage>(\n  config?: Config<MS>,\n): config is IndexerConfig =>\n  Boolean(config && 'indexer' in config && typeof config.indexer === 'string')\n"],"names":[],"mappings":";;AA2CA;;;;;AAKG;MACU,eAAe,GAAG,CAC7B,MAAsB,MACH;IACnB,OAAO,EAAE,MAAM,CAAC,OAAO;IACvB,iBAAiB,EAAE,MAAM,CAAC,iBAAiB;IAC3C,KAAK,EAAE,MAAM,CAAC,KAAK;AACpB,CAAA,EAAC;AAEF;;;;;AAKG;MACU,WAAW,GAAG,CACzB,MAAsB,MACH;IACnB,QAAQ,EAAE,MAAM,CAAC,QAAQ;IACzB,OAAO,EAAE,MAAM,CAAC,OAAO;IACvB,iBAAiB,EAAE,MAAM,CAAC,iBAAiB;IAC3C,KAAK,EAAE,MAAM,CAAC,KAAK;AACpB,CAAA,EAAC;AAEF;;;;;AAKG;AACU,MAAA,YAAY,GAAG,CAC1B,MAAkB,KACW,WAAW,CAAC,MAAM,CAAC,IAAI,eAAe,CAAC,MAAM,EAAC;AAE7E;;;;;AAKG;AACU,MAAA,WAAW,GAAG,CACzB,MAAmB,KACS,OAAO,CAAC,MAAM,IAAI,UAAU,IAAI,MAAM,EAAC;AAErE;;;;;AAKG;AACU,MAAA,eAAe,GAAG,CAC7B,MAAmB,KAEnB,OAAO,CAAC,MAAM,IAAI,SAAS,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ;;;;"}