'use strict';

var types = require('../../meta/types.js');
var web3_storage = require('@zeitgeistpm/web3.storage');

/**
 * Default IPFS metadata storage for the zeitgeist ecosystem.
 * @returns MetadataStorage
 */
const ZeitgeistIpfs = () => {
    return types.createStorage(web3_storage.IPFS.storage({
        node: { url: 'http://ipfs.zeitgeist.pm:5001' },
        cluster: {
            url: 'https://ipfs-cluster.zeitgeist.pm',
            auth: {
                username: 'zeitgeist',
                password: '5ZpmQl*rWn%Z',
            },
        },
    }));
    // const memoizedstorage = memoize(() => {
    //   const storage = IPFS.storage({
    //     node: { url: 'http://ipfs.zeitgeist.pm:5001' },
    //     cluster: {
    //       url: 'https://ipfs-cluster.zeitgeist.pm',
    //       auth: {
    //         username: 'zeitgeist',
    //         password: '5ZpmQl*rWn%Z',
    //       },
    //     },
    //   })
    //   return storage
    // })
    // const wrap = (key: keyof MetadataStorage, storage: Storage<any, CID>) => {
    //   return {
    //     get: ({ cid }: TaggedID<any>) => storage.get(cid),
    //     del: ({ cid }: TaggedID<any>) => storage.get(cid),
    //     put: Te.from<TaggedID<any>, [any]>(async data => {
    //       const cid = await storage.put(data)
    //       return {
    //         __meta: key,
    //         cid: cid.unwrap(),
    //       }
    //     }),
    //   } as Storage<any, TaggedID<any>>
    // }
    // const storage = {
    //   markets: wrap('markets', memoizedstorage()),
    //   comments: wrap('comments', memoizedstorage()),
    // } as MS
    // return storage
};

exports.ZeitgeistIpfs = ZeitgeistIpfs;
//# sourceMappingURL=storage.js.map
