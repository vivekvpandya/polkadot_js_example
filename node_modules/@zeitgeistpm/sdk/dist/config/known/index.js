'use strict';

var storage = require('./storage.js');
var types = require('./types.js');

/**
 * Connect to the mainnet rpc and indexer
 * @returns KnownPreset<FullConfig>
 */
const mainnet = () => {
    return {
        provider: [rpcs.dwellir.uri, rpcs.zeitgeist.uri, rpcs.onfinality.uri],
        indexer: indexers.zeitgeist.uri,
        storage: storage.ZeitgeistIpfs(),
    };
};
/**
 * Connect to the mainnet rpc only
 * @returns KnownPreset<RpcConfig>
 */
const mainnetRpc = () => {
    return {
        provider: [rpcs.dwellir.uri, rpcs.zeitgeist.uri, rpcs.onfinality.uri],
        storage: storage.ZeitgeistIpfs(),
    };
};
/**
 * Connect to the mainnet indexer only.
 * @returns KnownPreset<IndexerConfig>
 */
const mainnetIndexer = () => {
    return {
        indexer: indexers.zeitgeist.uri,
    };
};
/**
 * Connect to the batterystation testnet rpc and indexer.
 * @returns KnownPreset<FullConfig>
 */
const batterystation = () => {
    return {
        provider: [rpcs.bsr.uri],
        indexer: indexers.bsr.uri,
        storage: storage.ZeitgeistIpfs(),
    };
};
/**
 * Connect to the batterystation rpc only
 * @returns KnownPreset<RpcConfig>
 */
const batterystationRpc = () => {
    return {
        provider: [rpcs.bsr.uri],
        storage: storage.ZeitgeistIpfs(),
    };
};
/**
 * Connect to the batterystation indexer only
 * @returns KnownPreset<IndexerConfig>
 */
const batterystationIndexer = () => {
    return {
        indexer: indexers.bsr.uri,
    };
};
/**
 * Known rpc endpoints.
 */
const rpcs = {
    zeitgeist: {
        uri: 'wss://rpc-0.zeitgeist.pm/',
        parachain: types.SupportedParachain.KUSAMA,
    },
    dwellir: {
        uri: 'wss://zeitgeist-rpc.dwellir.com/',
        parachain: types.SupportedParachain.KUSAMA,
    },
    onfinality: {
        uri: 'wss://zeitgeist.api.onfinality.io/public-ws',
        parachain: types.SupportedParachain.KUSAMA,
    },
    bsr: {
        uri: 'wss://bsr.zeitgeist.pm',
        parachain: types.SupportedParachain.BSR,
    },
    dev: {
        uri: 'ws://127.0.0.1:9944',
        parachain: types.SupportedParachain.LOCAL,
    },
};
/**
 * Known indexer endpoints.
 */
const indexers = {
    zeitgeist: {
        uri: 'https://processor.rpc-0.zeitgeist.pm/graphql',
        parachain: types.SupportedParachain.KUSAMA,
    },
    bsr: {
        uri: 'https://processor.bsr.zeitgeist.pm/graphql',
        parachain: types.SupportedParachain.BSR,
    },
    local: {
        uri: 'http://localhost:4350/graphql',
        parachain: types.SupportedParachain.LOCAL,
    },
};

exports.ZeitgeistIpfs = storage.ZeitgeistIpfs;
Object.defineProperty(exports, 'KnownPresets', {
    enumerable: true,
    get: function () { return types.KnownPresets; }
});
Object.defineProperty(exports, 'SupportedParachain', {
    enumerable: true,
    get: function () { return types.SupportedParachain; }
});
exports.isKnownPreset = types.isKnownPreset;
exports.batterystation = batterystation;
exports.batterystationIndexer = batterystationIndexer;
exports.batterystationRpc = batterystationRpc;
exports.indexers = indexers;
exports.mainnet = mainnet;
exports.mainnetIndexer = mainnetIndexer;
exports.mainnetRpc = mainnetRpc;
exports.rpcs = rpcs;
//# sourceMappingURL=index.js.map
