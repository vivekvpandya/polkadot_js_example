import type { CommentMetadata, MetadataStorage } from '../../meta';
import type { FullConfig, IndexerConfig, RpcConfig } from '../types';
import { SupportedParachain } from './types';
export * from './storage';
export * from './types';
/**
 * Connect to the mainnet rpc and indexer
 * @returns KnownPreset<FullConfig>
 */
export declare const mainnet: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, CommentMetadata>>() => FullConfig<MS>;
/**
 * Connect to the mainnet rpc only
 * @returns KnownPreset<RpcConfig>
 */
export declare const mainnetRpc: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, CommentMetadata>>() => RpcConfig<MS>;
/**
 * Connect to the mainnet indexer only.
 * @returns KnownPreset<IndexerConfig>
 */
export declare const mainnetIndexer: () => IndexerConfig;
/**
 * Connect to the batterystation testnet rpc and indexer.
 * @returns KnownPreset<FullConfig>
 */
export declare const batterystation: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, CommentMetadata>>() => FullConfig<MS>;
/**
 * Connect to the batterystation rpc only
 * @returns KnownPreset<RpcConfig>
 */
export declare const batterystationRpc: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, CommentMetadata>>() => RpcConfig<MS>;
/**
 * Connect to the batterystation indexer only
 * @returns KnownPreset<IndexerConfig>
 */
export declare const batterystationIndexer: () => IndexerConfig;
/**
 * Known rpc endpoints.
 */
export declare const rpcs: {
    zeitgeist: {
        uri: string;
        parachain: SupportedParachain;
    };
    dwellir: {
        uri: string;
        parachain: SupportedParachain;
    };
    onfinality: {
        uri: string;
        parachain: SupportedParachain;
    };
    bsr: {
        uri: string;
        parachain: SupportedParachain;
    };
    dev: {
        uri: string;
        parachain: SupportedParachain;
    };
};
/**
 * Known indexer endpoints.
 */
export declare const indexers: {
    zeitgeist: {
        uri: string;
        parachain: SupportedParachain;
    };
    bsr: {
        uri: string;
        parachain: SupportedParachain;
    };
    local: {
        uri: string;
        parachain: SupportedParachain;
    };
};
//# sourceMappingURL=index.d.ts.map