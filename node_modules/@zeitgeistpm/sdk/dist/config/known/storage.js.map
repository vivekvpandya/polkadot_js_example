{"version":3,"file":"storage.js","sources":["../../../src/config/known/storage.ts"],"sourcesContent":["import { createStorage, MetadataStorage } from '../../meta/types'\nimport { IPFS } from '@zeitgeistpm/web3.storage'\n\n/**\n * Default IPFS metadata storage for the zeitgeist ecosystem.\n * @returns MetadataStorage\n */\nexport const ZeitgeistIpfs = <MS extends MetadataStorage>(): MS => {\n  return createStorage(\n    IPFS.storage({\n      node: { url: 'http://ipfs.zeitgeist.pm:5001' },\n      cluster: {\n        url: 'https://ipfs-cluster.zeitgeist.pm',\n        auth: {\n          username: 'zeitgeist',\n          password: '5ZpmQl*rWn%Z',\n        },\n      },\n    }),\n  ) as MS\n  // const memoizedstorage = memoize(() => {\n  //   const storage = IPFS.storage({\n  //     node: { url: 'http://ipfs.zeitgeist.pm:5001' },\n  //     cluster: {\n  //       url: 'https://ipfs-cluster.zeitgeist.pm',\n  //       auth: {\n  //         username: 'zeitgeist',\n  //         password: '5ZpmQl*rWn%Z',\n  //       },\n  //     },\n  //   })\n  //   return storage\n  // })\n\n  // const wrap = (key: keyof MetadataStorage, storage: Storage<any, CID>) => {\n  //   return {\n  //     get: ({ cid }: TaggedID<any>) => storage.get(cid),\n  //     del: ({ cid }: TaggedID<any>) => storage.get(cid),\n  //     put: Te.from<TaggedID<any>, [any]>(async data => {\n  //       const cid = await storage.put(data)\n  //       return {\n  //         __meta: key,\n  //         cid: cid.unwrap(),\n  //       }\n  //     }),\n  //   } as Storage<any, TaggedID<any>>\n  // }\n\n  // const storage = {\n  //   markets: wrap('markets', memoizedstorage()),\n  //   comments: wrap('comments', memoizedstorage()),\n  // } as MS\n\n  // return storage\n}\n"],"names":["createStorage","IPFS"],"mappings":";;;;;AAGA;;;AAGG;AACI,MAAM,aAAa,GAAG,MAAqC;AAChE,IAAA,OAAOA,mBAAa,CAClBC,iBAAI,CAAC,OAAO,CAAC;AACX,QAAA,IAAI,EAAE,EAAE,GAAG,EAAE,+BAA+B,EAAE;AAC9C,QAAA,OAAO,EAAE;AACP,YAAA,GAAG,EAAE,mCAAmC;AACxC,YAAA,IAAI,EAAE;AACJ,gBAAA,QAAQ,EAAE,WAAW;AACrB,gBAAA,QAAQ,EAAE,cAAc;AACzB,aAAA;AACF,SAAA;AACF,KAAA,CAAC,CACG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCT;;;;"}