{"version":3,"file":"create.esm.js","sources":["../src/create.ts"],"sourcesContent":["import type { WsProvider } from '@polkadot/api'\nimport * as Indexer from '@zeitgeistpm/indexer'\nimport { options } from '@zeitgeistpm/rpc'\nimport { assert } from '@zeitgeistpm/utility/dist/assert'\nimport { assign } from '@zeitgeistpm/utility/dist/observable'\nimport polly from 'polly-js'\nimport { from, Observable, of } from 'rxjs'\nimport { mergeMap, shareReplay } from 'rxjs/operators'\nimport type { FullContext, IndexerContext, RpcContext } from './context/types'\nimport { debug } from './debug'\nimport { MetadataStorage, saturate } from './meta'\nimport {\n  asIndexerConfig,\n  asRpcConfig,\n  Config,\n  Context,\n  FullConfig,\n  IndexerConfig,\n  isFullConfig,\n  isIndexerConfig,\n  isRpcConfig,\n  RpcConfig,\n  sdk,\n  Sdk,\n  teardown,\n} from './types'\n\n/**\n * Create an instance of the zeitgeist sdk with full features of both indexer and chain rpc.\n *\n * @mode full\n * @note create with different config to enable indexer or rpc features.\n * @param config FullConfig - Rpc and indexer config\n * @returns Promise<Sdk<FullContext>>\n */\nexport async function create<MS extends MetadataStorage<any, any>>(\n  config: FullConfig<MS>,\n): Promise<Sdk<FullContext<MS>, MS>>\n/**\n * Create an instance of the zeitgeist sdk with only rpc features.\n *\n * @mode rpc\n * @note create with different config to enable indexer or rpc features.\n * @param config RpcConfig - Config for the rpc node\n * @returns Promise<Sdk<RpcContext>>\n */\nexport async function create<MS extends MetadataStorage<any, any>>(\n  config: RpcConfig<MS>,\n): Promise<Sdk<RpcContext<MS>, MS>>\n/**\n * Create an instance of the zeitgeist sdk with only indexer features.\n *\n * @mode indexer\n * @note create with different config to enable indexer or rpc features.\n * @param config IndexerConfig - Config for the indexer\n * @returns Promise<Sdk<IndexerContext>>\n */\nexport async function create<MS extends MetadataStorage<any, any>>(\n  config: IndexerConfig,\n): Promise<Sdk<IndexerContext, MS>>\nexport async function create<MS extends MetadataStorage<any, any>>(config: Config<MS>) {\n  assert(\n    isFullConfig(config) || isRpcConfig(config) || isIndexerConfig(config),\n    () =>\n      new Error(\n        `Initialization error. Config needs to specify at least a valid indexer option or api rpc option.`,\n      ),\n  )\n\n  if (isFullConfig(config)) {\n    debug(\n      `Using rpc and indexer enabled sdk, indexed data will be prefered when indexer loads.`,\n      config,\n      'debug',\n    )\n    return sdk(await createFullContext(config))\n  } else if (isIndexerConfig(config)) {\n    debug(\n      `Using only indexer, no rpc methods or transactions on chain are available to the sdk.`,\n      config,\n      'warn',\n    )\n    return sdk(await createIndexerContext(config))\n  } else {\n    debug(\n      `Using only rpc, querying data might be more limited and/or slower.`,\n      config,\n      'warn',\n    )\n    return sdk(await createRpcContext(config))\n  }\n}\n\n/**\n * Initialize the indexer and/or rpc concurrently and emit partially applied intances of the Sdk.\n * Useful when initializing in a UI context where displaying data from the indexer as\n * fast as possible is a priority.\n *\n * Creates a shared observable that replays last emitted sdk instace to late subscribers,\n * and disconnectes the rpc provider when all subscribers unsubscribe.\n *\n * @note If config is indexer and rpc, indexer sdk will emit first.\n *\n * @param config FullConfig\n * @returns Observable<Sdk<Context<MS>, MS>>\n */\nexport const create$ = <MS extends MetadataStorage = MetadataStorage>(\n  config: Config<MS>,\n): Observable<Sdk<Context<MS>, MS>> => {\n  const config$ = isFullConfig(config)\n    ? of(asIndexerConfig(config), asRpcConfig(config))\n    : of(config)\n\n  const context$ = config$.pipe(\n    mergeMap(config => {\n      if (isIndexerConfig(config)) {\n        return from(createIndexerContext(config))\n      }\n      return from(createRpcContext(config))\n    }),\n    assign(),\n  )\n\n  const sdk$: Observable<Sdk<Context<MS>, MS>> = context$.pipe(\n    mergeMap(\n      context =>\n        new Observable<Sdk<Context<MS>, MS>>(subscription => {\n          subscription.add(() => teardown(context))\n          subscription.next(sdk(context))\n        }),\n    ),\n  )\n\n  return sdk$.pipe(shareReplay({ bufferSize: 1, refCount: true }))\n}\n\n/**\n * Create a full context with both rpc and indexer capabilities.\n *\n * @param config RpcConfig\n * @returns Promise<FullContext>\n */\nexport const createFullContext = async <MS extends MetadataStorage<any, any>>(\n  config: FullConfig<MS>,\n): Promise<FullContext<MS>> => {\n  const [rpc, indexer] = await Promise.all([\n    createRpcContext(config),\n    createIndexerContext(config),\n  ])\n  return {\n    ...rpc,\n    ...indexer,\n  }\n}\n\n/**\n * Create an indexer context that only connects to the rpc api.\n *\n * @param config RpcConfig\n * @returns Promise<RpcContext>\n */\nexport const createRpcContext = async <MS extends MetadataStorage<any, any>>(\n  config: RpcConfig<MS>,\n): Promise<RpcContext<MS>> => {\n  const { ApiPromise, WsProvider } = await import('@polkadot/api')\n\n  debug(`connecting to rpc: ${config.provider}`, config)\n\n  const provider = await polly()\n    .logger(_ => {\n      debug(`rpc connection failed, retrying..`, config, 'warn')\n    })\n    .waitAndRetry(config.connectionRetries ?? 8)\n    .executeForPromise<WsProvider>(\n      () =>\n        new Promise((resolve, reject) => {\n          const provider = new WsProvider(config.provider)\n          provider.on('error', error => {\n            reject(error)\n          })\n          provider.on('connected', () => {\n            resolve(provider)\n          })\n        }),\n    )\n\n  const api = await ApiPromise.create({ ...options({ provider }) })\n\n  debug(`connected to node rpc`, { ...config, color: '#36a4e3' })\n\n  return {\n    api,\n    provider,\n    storage: saturate<MS>(config.storage),\n  }\n}\n\n/**\n * Create an indexer context that only connects to the gql indexer.\n *\n * @param config IndexerConfig\n * @returns Promise<IndexerContext>\n */\nexport const createIndexerContext = async (\n  config: IndexerConfig,\n): Promise<IndexerContext> => {\n  debug(`connecting to indexer: ${config.indexer}`, config)\n\n  const indexer = Indexer.create({ uri: config.indexer })\n\n  const pinged = await polly()\n    .logger(_ => {\n      debug(`indexer connection failed, retrying..`, config, 'warn')\n    })\n    .waitAndRetry(config.connectionRetries ?? 8)\n    .executeForPromise(() => indexer.ping())\n\n  debug(`connected to indexer, response time ${pinged}ms`, {\n    ...config,\n    color: '#52c45e',\n  })\n\n  return { indexer }\n}\n\nexport default create\n"],"names":[],"mappings":"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"}