/**
 * Type representing values that are not available.
 */
export declare type NA = {
    __type: typeof sym;
    reason: string;
    toString: () => string;
};
/**
 * Create a NA value.
 *
 * @param reason string
 * @returns NA
 */
export declare const na: (reason: string) => NA;
declare const sym: unique symbol;
/**
 * Const symbold representing a not available value.
 */
export declare const NA: NA;
/**
 * Get the reason the value is not available.
 *
 * @param na NA
 * @returns string
 */
export declare const reasonOf: (na: NA) => string;
/**
 * Typeguard for NA values.
 *
 * @param value unknown
 * @returns value is NA
 */
export declare const isNA: (value: unknown) => value is NA;
/**
 * Typeguard to check if a value is available
 *
 * @param value T | NA
 * @returns value is T
 */
export declare const isAvailable: <T>(value: NA | T) => value is T;
export {};
//# sourceMappingURL=na.d.ts.map