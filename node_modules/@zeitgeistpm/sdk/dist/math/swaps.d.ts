import { Decimal } from 'decimal.js';
import { BigNumber } from './bignumber';
/**
 * Calculate the spot price for an asset given the balance in and out and weights.
 * Usefull for clientside calculations when rpc calls are costly or not needed.
 *
 * @note Use sdk.context.api.rpc.swaps.getSpotPrice(s) for higher accuracy and verifiability.
 *
 * @param tokenBalanceIn BigNumber - the balance of the asset swapped into the pool
 * @param tokenWeightIn BigNumber - the weight of in asset
 * @param tokenBalanceOut BigNumber - the balance of the asset swapped out of the pool
 * @param tokenWeightOut BigNumber - the weight of out asset
 * @param swapFee BigNumber - the fee of the swap
 * @returns Decimal
 */
export declare const calcSpotPrice: (tokenBalanceIn: BigNumber, tokenWeightIn: BigNumber, tokenBalanceOut: BigNumber, tokenWeightOut: BigNumber, swapFee: BigNumber) => Decimal;
/**
 * Calculate the expected amount of asset X gotten out when swaping an asset Y into a pool.
 *
 * @param tokenBalanceIn BigNumber - amount of 'in' asset in the pool
 * @param tokenWeightIn BigNumber - weight of 'in' asset on the pool
 * @param tokenBalanceOut BigNumber - amount of 'out' asset in the pool
 * @param tokenWeightOut BigNumber - weight of 'out' asset on the pool
 * @param tokenAmountIn BigNumber - amount in for the swap
 * @param swapFee BigNumber - swap fee
 * @returns Decimal
 */
export declare const calcOutGivenIn: (tokenBalanceIn: BigNumber, tokenWeightIn: BigNumber, tokenBalanceOut: BigNumber, tokenWeightOut: BigNumber, tokenAmountIn: BigNumber, swapFee: BigNumber) => Decimal;
/**
 * Calculate the expected amount of asset X needed to put in to get a certain amount of asset Y out.
 *
 * @param tokenBalanceIn BigNumber - amount of 'in' asset in the pool
 * @param tokenWeightIn BigNumber - weight of 'in' asset on the pool
 * @param tokenBalanceOut BigNumber - amount of 'out' asset in the pool
 * @param tokenWeightOut BigNumber - weight of 'out' asset on the pool
 * @param tokenAmountIn BigNumber - amount in for the swap
 * @param swapFee BigNumber - swap fee
 * @returns Decimal
 */
export declare const calcInGivenOut: (tokenBalanceIn: BigNumber, tokenWeightIn: BigNumber, tokenBalanceOut: BigNumber, tokenWeightOut: BigNumber, tokenAmountOut: BigNumber, swapFee: BigNumber) => Decimal;
/**
 *
 * @param lowerBound BigNumber - the lower bound of the scalar market
 * @param upperBound BigNumber - the upper bound of the scalar market
 * @param resolvedNumber BigNumber - the resolved number of the scalar market
 * @param shortAssetAmount BigNumber - the amount of short tokens, usually the users balance for the short token
 * @param longAssetAmount BigNumber - the amount of long tokens, usually the users balance for the long token
 * @returns Decimal
 */
export declare const calcScalarWinnings: (lowerBound: BigNumber, upperBound: BigNumber, resolvedNumber: BigNumber, shortAssetAmount: BigNumber, longAssetAmount: BigNumber) => Decimal;
/**
 *
 * @param lowerBound BigNumber - the lower bound of the scalar market
 * @param upperBound BigNumber - the upper bound of the scalar market
 * @param resolvedNumber BigNumber - the resolved number of the scalar market
 * @returns
 */
export declare const calcScalarResolvedPrices: (lowerBound: BigNumber, upperBound: BigNumber, resolvedNumber: BigNumber) => {
    longTokenValue: Decimal;
    shortTokenValue: Decimal;
};
//# sourceMappingURL=swaps.d.ts.map