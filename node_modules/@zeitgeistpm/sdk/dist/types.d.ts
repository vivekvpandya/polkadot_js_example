import { Context, FullContext, IndexerContext, RpcContext } from './context/types.js';
import { MetadataStorage } from './meta/index.js';
import { Model } from './model/index.js';
export * from './config/types.js';
export * from './context/types.js';
export * from './model/types.js';
/**
 * Top level Zeitgeist SDK type.
 */
export declare type Sdk<C extends Context<MS>, MS extends MetadataStorage = MetadataStorage> = C & {
    /**
     * The context that was used to create the sdk.
     * Used for internal type narrowing to work correctly..
     *
     * @private - pseudo private property
     */
    readonly __context: C;
    /**
     * Enriched zeitgeist models with features for qyerying data on chain and indexer,
     * and for creating transaction flows with for example richer validation to ensure that
     * the markets you have the official standard of metadata so that they show up in the official frontend.
     */
    readonly model: Model<C, MS>;
};
/**
 * Utility for creating a new SDK.
 *
 * @generic C extends Context<MS>
 * @generic MS extends MetadataStorage = MetadataStorage
 * @param context C
 * @returns Sdk<C, MS>
 */
export declare const sdk: <C extends Context<MS>, MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("./meta/index.js").CommentMetadata> = MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("./meta/index.js").CommentMetadata>>(context: C) => Sdk<C, MS>;
/**
 * Typeguard for full sdk.
 *
 * @param sdk
 * @returns sdk is Sdk<FullContext>
 */
export declare const isFullSdk: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("./meta/index.js").CommentMetadata>>(sdk: unknown) => sdk is Sdk<FullContext<MS>, MS>;
/**
 * Typeguard for indexer sdk.
 *
 * @param sdk
 * @returns sdk is Sdk<IndexerContext>
 */
export declare const isIndexedSdk: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("./meta/index.js").CommentMetadata>>(sdk: any) => sdk is Sdk<IndexerContext, MS>;
/**
 * Typeguard for rpc sdk.
 *
 * @param sdk
 * @returns sdk is Sdk<RpcContext>
 */
export declare const isRpcSdk: <MS extends MetadataStorage<{
    __meta: "markets";
    slug: string;
    description: string;
    question: string;
    tags?: string[] | undefined;
    confidentialId?: string | undefined;
    img?: string | undefined;
    scalarType?: "number" | "date" | undefined;
    categories?: {
        name: string;
        img?: string | undefined;
        ticker?: string | undefined;
        color?: string | undefined;
    }[] | undefined;
}, import("./meta/index.js").CommentMetadata>>(sdk: any) => sdk is Sdk<RpcContext<MS>, MS>;
//# sourceMappingURL=types.d.ts.map