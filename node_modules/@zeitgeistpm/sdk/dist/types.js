'use strict';

var util = require('@polkadot/util');
var types$2 = require('./context/types.js');
var index$1 = require('./model/index.js');
var index = require('./config/known/index.js');
require('@zeitgeistpm/rpc');
require('@zeitgeistpm/utility/dist/assert');
require('@zeitgeistpm/utility/dist/either');
require('@zeitgeistpm/utility/dist/error');
require('@zeitgeistpm/utility/dist/option');
require('@zeitgeistpm/utility/dist/taskeither');
require('@zeitgeistpm/utility/dist/time');
require('cids');
require('decimal.js');
require('rxjs');
require('rxjs/operators');
require('lodash-es');
require('./primitives/ztg.js');
require('./primitives/assetid.js');
require('./primitives/blocknumber.js');
require('./primitives/marketid.js');
require('@zeitgeistpm/utility/dist/null');
require('@zeitgeistpm/indexer');
require('@zeitgeistpm/utility/dist/array');
require('@zeitgeistpm/utility/dist/infinity');

/**
 * Utility for creating a new SDK.
 *
 * @generic C extends Context<MS>
 * @generic MS extends MetadataStorage = MetadataStorage
 * @param context C
 * @returns Sdk<C, MS>
 */
const sdk = (context) => {
    let instance = {
        __context: context,
        ...context,
        model: index$1.model(context),
    };
    return instance;
};
/**
 * Typeguard for full sdk.
 *
 * @param sdk
 * @returns sdk is Sdk<FullContext>
 */
const isFullSdk = (sdk) => isIndexedSdk(sdk) && isRpcSdk(sdk);
/**
 * Typeguard for indexer sdk.
 *
 * @param sdk
 * @returns sdk is Sdk<IndexerContext>
 */
const isIndexedSdk = (sdk) => !util.isNull(sdk) && sdk && types$2.isIndexerContext(sdk.__context);
/**
 * Typeguard for rpc sdk.
 *
 * @param sdk
 * @returns sdk is Sdk<RpcContext>
 */
const isRpcSdk = (sdk) => Boolean(!util.isNull(sdk) && types$2.isRpcContext(sdk.__context));

exports.isFullContext = types$2.isFullContext;
exports.isIndexerContext = types$2.isIndexerContext;
exports.isRpcContext = types$2.isRpcContext;
exports.teardown = types$2.teardown;
exports.batterystation = index.batterystation;
exports.batterystationIndexer = index.batterystationIndexer;
exports.batterystationRpc = index.batterystationRpc;
exports.indexers = index.indexers;
exports.mainnet = index.mainnet;
exports.mainnetIndexer = index.mainnetIndexer;
exports.mainnetRpc = index.mainnetRpc;
exports.rpcs = index.rpcs;
exports.isFullSdk = isFullSdk;
exports.isIndexedSdk = isIndexedSdk;
exports.isRpcSdk = isRpcSdk;
exports.sdk = sdk;
//# sourceMappingURL=types.js.map
