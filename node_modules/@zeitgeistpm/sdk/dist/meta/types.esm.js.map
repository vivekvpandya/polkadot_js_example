{"version":3,"file":"types.esm.js","sources":["../../src/meta/types.ts"],"sourcesContent":["import * as Te from '@zeitgeistpm/utility/dist/taskeither'\nimport type { Storage } from '@zeitgeistpm/web3.storage'\nimport type { CID } from 'ipfs-http-client'\nimport type { CommentMetadata } from './comment'\nimport type { MarketMetadata } from './market'\n\n/**\n * Generic metadata storage type.\n *\n * @generic M = MarketMetadata\n * @generic C = Comment\n */\nexport interface MetadataStorage<\n  M extends TaggedMetadata<'markets'> = MarketMetadata,\n  C extends TaggedMetadata<'comments'> = CommentMetadata,\n> {\n  /**\n   * Storage for Market metadata.\n   */\n  readonly markets: Storage<M, TaggedID<'markets'>>\n  /**\n   * Storage for Market comments.\n   * @notes not in use, just testing type narrowing.\n   */\n  readonly comments: Storage<C, TaggedID<'comments'>>\n  /**\n   * Use storage narrowed to a sub storage type.\n   *\n   * @note for internal usage.\n   *\n   * @generic K extends keyof this\n   * @param key K\n   */\n  of<K extends keyof this>(\n    key: K,\n  ): Storage<StorageTypeOf<this[K]>, StorageIdTypeOf<this[K]>>\n}\n\n/**\n * Create a tagged metadata storage object type.\n * @generic T extends keyof MetadataStorage\n */\nexport type TaggedMetadata<T extends keyof MetadataStorage> = { __meta: T }\n\n/**\n * Create a tagged metadata storage object id.\n * @generic T extends keyof MetadataStorage\n */\nexport type TaggedID<T extends keyof MetadataStorage> = { __meta: T; cid: CID }\n\n/**\n * Type helper to extract the storage type at a given key in a MetadataStorage\n *\n * @generic MS extends MetadataStorage,\n * @generic K extends keyof MSS>\n */\nexport type StorageTypeOf<S> = S extends Storage<infer T, infer ID> ? T : never\n\n/**\n * Type helper to extract the storage id at a given key in a MetadataStorage\n *\n * @generic MS extends MetadataStorage,\n * @generic K extends keyof MSS>\n */\nexport type StorageIdTypeOf<S> = S extends Storage<infer T, infer ID> ? ID : never\n\n/**\n * Unpack the inner type of market storage.\n * @generic MS extends MetadataStorage\n */\nexport type MarketTypeOf<MS extends MetadataStorage> = StorageTypeOf<MS['markets']>\n\n/**\n * Unpack the inner type of market id.\n * @generic MS extends MetadataStorage\n */\nexport type MarketIdTypeOf<MS extends MetadataStorage> = StorageIdTypeOf<MS['markets']>\n\n/**\n * Utility for creating typed and tagged metadata storage.\n *\n * @generic M extends TaggedMetadata<'markets'> = MarketMetadata - market metadata\n * @generic C extends TaggedMetadata<'comments'> = CommentMetadata - comment metadata\n * @param storage Storage<any, any>\n * @returns\n */\nexport const createStorage = <\n  M extends TaggedMetadata<'markets'> = MarketMetadata,\n  C extends TaggedMetadata<'comments'> = CommentMetadata,\n>(\n  storage: Storage<any, any>,\n): MetadataStorage<M, C> =>\n  saturate<MetadataStorage<M, C>>({\n    markets: tagged('markets', storage),\n    comments: tagged('comments', storage),\n  } as MetadataStorage<M, C>)\n\n/**\n * Create a sturatable metadata storage.\n *\n * @generic MS extends MetadataStorage\n * @param storage M\n * @returns M & SaturatedMetadataStorage<MS>\n */\nexport const saturate = <MS extends MetadataStorage<any, any>>(storage: MS): MS => ({\n  ...storage,\n  of: key => storage[key] as any,\n})\n\n/**\n * Utility to create a tagged metadata storage.\n *\n * @param key keyof MetadataStorage\n * @param storage Storage<T, CID>\n * @returns Storage<any, TaggedID<any>>\n */\nexport const tagged = <T extends TaggedMetadata<any>>(\n  key: keyof MetadataStorage,\n  storage: Storage<T, CID>,\n) =>\n  ({\n    get: ({ cid }: TaggedID<any>) => storage.get(cid),\n    del: ({ cid }: TaggedID<any>) => storage.del(cid),\n    put: Te.from<TaggedID<any>, Error, [any]>(async data => {\n      const cid = await storage.put(data)\n      return {\n        __meta: key,\n        cid: cid,\n      }\n    }),\n  } as Storage<any, TaggedID<any>>)\n"],"names":[],"mappings":";;AA8EA;;;;;;;AAOG;AACU,MAAA,aAAa,GAAG,CAI3B,OAA0B,KAE1B,QAAQ,CAAwB;AAC9B,IAAA,OAAO,EAAE,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC;AACnC,IAAA,QAAQ,EAAE,MAAM,CAAC,UAAU,EAAE,OAAO,CAAC;AACb,CAAA,EAAC;AAE7B;;;;;;AAMG;MACU,QAAQ,GAAG,CAAuC,OAAW,MAAU;AAClF,IAAA,GAAG,OAAO;IACV,EAAE,EAAE,GAAG,IAAI,OAAO,CAAC,GAAG,CAAQ;AAC/B,CAAA,EAAC;AAEF;;;;;;AAMG;AACU,MAAA,MAAM,GAAG,CACpB,GAA0B,EAC1B,OAAwB,MAEvB;AACC,IAAA,GAAG,EAAE,CAAC,EAAE,GAAG,EAAiB,KAAK,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AACjD,IAAA,GAAG,EAAE,CAAC,EAAE,GAAG,EAAiB,KAAK,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;IACjD,GAAG,EAAE,EAAE,CAAC,IAAI,CAA8B,OAAM,IAAI,KAAG;QACrD,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACnC,OAAO;AACL,YAAA,MAAM,EAAE,GAAG;AACX,YAAA,GAAG,EAAE,GAAG;SACT,CAAA;AACH,KAAC,CAAC;AAC6B,CAAA;;;;"}