'use strict';

var codec = require('@zeitgeistpm/utility/dist/codec');
var error = require('@zeitgeistpm/utility/dist/error');
var Te = require('@zeitgeistpm/utility/dist/taskeither');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var Te__namespace = /*#__PURE__*/_interopNamespaceDefault(Te);

/**
 * Base64 Codec
 */
const b64 = codec.Base64Codec();
/**
 *
 * Pinns a cid to the cluster.
 */
const pin = Te__namespace.from(async (cid, config) => {
    const response = await fetch(new URL(`/pins/${cid}?replication-min=2&replication-max=2`, config.url).href, {
        headers: headers(config),
        method: `POST`,
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(`[${data?.code ?? '500'}]: ${data?.message ?? 'Unknown cluster api error.'}`);
    }
    return data;
});
/**
 *
 * Unpinns a cid from the cluster.
 */
const unpin = Te__namespace.from(async (cid, config) => {
    const response = await fetch(new URL(`/pins/${cid}`, config.url).href, {
        headers: headers(config),
        method: `DELETE`,
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(`[${data?.code ?? '500'}]: ${data?.message ?? 'Unknown cluster api error.'}`);
    }
    return data;
});
const headers = (config) => {
    const headers = new Headers({
        'Content-Type': 'multipart/form-data',
    });
    if (config.auth) {
        const authorization = b64.encode(`${config.auth.username}:${config.auth.password}`).unrightOr(error.throws);
        headers.append('Authorization', `Basic ${authorization}`);
    }
    return headers;
};

exports.pin = pin;
exports.unpin = unpin;
//# sourceMappingURL=cluster.js.map
