{"version":3,"file":"cluster.mjs","sources":["../../../../src/storage/providers/ipfs/cluster.ts"],"sourcesContent":["import { Base64Codec } from '@zeitgeistpm/utility/dist/codec'\nimport { throws } from '@zeitgeistpm/utility/dist/error'\nimport * as Te from '@zeitgeistpm/utility/dist/taskeither'\nimport { IPFSClusterConfiguration } from './types'\n\n/**\n * Response type for both pinning and unpinning the the ipfs cluster.\n */\nexport type IPFSClusterPinningResponse = {\n  replication_factor_min: number\n  replication_factor_max: number\n  name: string\n  mode: string\n  shard_size: number\n  user_allocations: string\n  expire_at: string\n  metadata: string\n  pin_update: string\n  cid: string\n  type: number\n  allocations: Array<string>\n  max_depth: number\n  reference: string\n}\n\n/**\n * Base64 Codec\n */\nconst b64 = Base64Codec()\n\n/**\n *\n * Pinns a cid to the cluster.\n */\nexport const pin = Te.from(\n  async (cid: string, config: IPFSClusterConfiguration): Promise<IPFSClusterPinningResponse> => {\n    const response = await fetch(new URL(`/pins/${cid}?replication-min=2&replication-max=2`, config.url).href, {\n      headers: headers(config),\n      method: `POST`,\n    })\n\n    const data = await response.json()\n\n    if (!response.ok) {\n      throw new Error(`[${data?.code ?? '500'}]: ${data?.message ?? 'Unknown cluster api error.'}`)\n    }\n\n    return data\n  },\n)\n\n/**\n *\n * Unpinns a cid from the cluster.\n */\nexport const unpin = Te.from(\n  async (cid: string, config: IPFSClusterConfiguration): Promise<IPFSClusterPinningResponse> => {\n    const response = await fetch(new URL(`/pins/${cid}`, config.url).href, {\n      headers: headers(config),\n      method: `DELETE`,\n    })\n\n    const data = await response.json()\n\n    if (!response.ok) {\n      throw new Error(`[${data?.code ?? '500'}]: ${data?.message ?? 'Unknown cluster api error.'}`)\n    }\n\n    return data\n  },\n)\n\nconst headers = (config: IPFSClusterConfiguration) => {\n  const headers = new Headers({\n    'Content-Type': 'multipart/form-data',\n  })\n\n  if (config.auth) {\n    const authorization = b64.encode(`${config.auth.username}:${config.auth.password}`).unrightOr(throws)\n    headers.append('Authorization', `Basic ${authorization}`)\n  }\n\n  return headers\n}\n"],"names":[],"mappings":";;;;AAyBA;;AAEG;AACH,MAAM,GAAG,GAAG,WAAW,EAAE,CAAA;AAEzB;;;AAGG;AACI,MAAM,GAAG,GAAG,EAAE,CAAC,IAAI,CACxB,OAAO,GAAW,EAAE,MAAgC,KAAyC;AAC3F,IAAA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,CAAA,MAAA,EAAS,GAAG,CAAA,oCAAA,CAAsC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE;AACzG,QAAA,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC;AACxB,QAAA,MAAM,EAAE,CAAM,IAAA,CAAA;AACf,KAAA,CAAC,CAAA;AAEF,IAAA,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;AAElC,IAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;AAChB,QAAA,MAAM,IAAI,KAAK,CAAC,CAAI,CAAA,EAAA,IAAI,EAAE,IAAI,IAAI,KAAK,CAAA,GAAA,EAAM,IAAI,EAAE,OAAO,IAAI,4BAA4B,CAAA,CAAE,CAAC,CAAA;AAC9F,KAAA;AAED,IAAA,OAAO,IAAI,CAAA;AACb,CAAC,EACF;AAED;;;AAGG;AACI,MAAM,KAAK,GAAG,EAAE,CAAC,IAAI,CAC1B,OAAO,GAAW,EAAE,MAAgC,KAAyC;AAC3F,IAAA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,CAAA,MAAA,EAAS,GAAG,CAAA,CAAE,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE;AACrE,QAAA,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC;AACxB,QAAA,MAAM,EAAE,CAAQ,MAAA,CAAA;AACjB,KAAA,CAAC,CAAA;AAEF,IAAA,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;AAElC,IAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;AAChB,QAAA,MAAM,IAAI,KAAK,CAAC,CAAI,CAAA,EAAA,IAAI,EAAE,IAAI,IAAI,KAAK,CAAA,GAAA,EAAM,IAAI,EAAE,OAAO,IAAI,4BAA4B,CAAA,CAAE,CAAC,CAAA;AAC9F,KAAA;AAED,IAAA,OAAO,IAAI,CAAA;AACb,CAAC,EACF;AAED,MAAM,OAAO,GAAG,CAAC,MAAgC,KAAI;AACnD,IAAA,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC;AAC1B,QAAA,cAAc,EAAE,qBAAqB;AACtC,KAAA,CAAC,CAAA;IAEF,IAAI,MAAM,CAAC,IAAI,EAAE;QACf,MAAM,aAAa,GAAG,GAAG,CAAC,MAAM,CAAC,CAAG,EAAA,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAA,CAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;QACrG,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,CAAS,MAAA,EAAA,aAAa,CAAE,CAAA,CAAC,CAAA;AAC1D,KAAA;AAED,IAAA,OAAO,OAAO,CAAA;AAChB,CAAC;;;;"}