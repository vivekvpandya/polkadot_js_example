import { u8aToString } from '@polkadot/util/u8a';
import { JsonCodec } from '@zeitgeistpm/utility/dist/codec';
import { throws } from '@zeitgeistpm/utility/dist/error';
import * as O from '@zeitgeistpm/utility/dist/option';
import * as Te from '@zeitgeistpm/utility/dist/taskeither';
import * as IPFSHTTPClient from 'ipfs-http-client';
import { pin, unpin } from './cluster.esm.js';

/**
 *
 * Create a MetadataStorage object that can store data on an IPFS node
 * and cluster if configured to do so.
 *
 * @generic T - type of metadata
 */
const storage = (config, codec = JsonCodec()) => {
    const node = IPFSHTTPClient.create({ url: config.node.url });
    const hashAlg = config.hashAlg ?? `sha3-384`;
    return {
        put: Te.from(async (data) => {
            const content = codec.decode(data).unrightOr(throws);
            const { cid } = await node.add({ content }, { hashAlg, pin: config?.node.pin ?? true });
            if (config.cluster) {
                await pin(cid.toString(), config.cluster).catch(_ => {
                    if (config?.node.pin) {
                        node.pin.rm(cid);
                    }
                });
            }
            return cid;
        }),
        get: Te.from(async (cid) => {
            const json = await read(node, cid);
            const encoded = json.bind(d => codec.encode(d).unright());
            return encoded;
        }),
        del: Te.from(async (cid) => {
            if (config.cluster) {
                await unpin(cid.toString(), config.cluster);
            }
            await node.pin.rm(cid.toString());
        }),
    };
};
/**
 * Read data from a cid and parse it to a string.
 */
const read = Te.from(async (node, cid) => {
    const content = [];
    for await (const chunk of node.cat(cid)) {
        content.push(chunk);
    }
    if (content.length === 0)
        return O.option(O.none());
    return O.option(O.some(content.map(u8aToString).reduce((acc, chunk) => acc + chunk)));
});

export { storage };
//# sourceMappingURL=index.esm.js.map
