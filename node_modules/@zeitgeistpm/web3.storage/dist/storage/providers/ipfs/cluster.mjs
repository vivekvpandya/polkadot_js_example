import { Base64Codec } from '@zeitgeistpm/utility/dist/codec';
import { throws } from '@zeitgeistpm/utility/dist/error';
import * as Te from '@zeitgeistpm/utility/dist/taskeither';

/**
 * Base64 Codec
 */
const b64 = Base64Codec();
/**
 *
 * Pinns a cid to the cluster.
 */
const pin = Te.from(async (cid, config) => {
    const response = await fetch(new URL(`/pins/${cid}?replication-min=2&replication-max=2`, config.url).href, {
        headers: headers(config),
        method: `POST`,
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(`[${data?.code ?? '500'}]: ${data?.message ?? 'Unknown cluster api error.'}`);
    }
    return data;
});
/**
 *
 * Unpinns a cid from the cluster.
 */
const unpin = Te.from(async (cid, config) => {
    const response = await fetch(new URL(`/pins/${cid}`, config.url).href, {
        headers: headers(config),
        method: `DELETE`,
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(`[${data?.code ?? '500'}]: ${data?.message ?? 'Unknown cluster api error.'}`);
    }
    return data;
});
const headers = (config) => {
    const headers = new Headers({
        'Content-Type': 'multipart/form-data',
    });
    if (config.auth) {
        const authorization = b64.encode(`${config.auth.username}:${config.auth.password}`).unrightOr(throws);
        headers.append('Authorization', `Basic ${authorization}`);
    }
    return headers;
};

export { pin, unpin };
//# sourceMappingURL=cluster.mjs.map
