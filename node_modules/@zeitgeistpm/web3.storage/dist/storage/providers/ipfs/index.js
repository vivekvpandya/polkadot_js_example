'use strict';

var u8a = require('@polkadot/util/u8a');
var codec = require('@zeitgeistpm/utility/dist/codec');
var error = require('@zeitgeistpm/utility/dist/error');
var O = require('@zeitgeistpm/utility/dist/option');
var Te = require('@zeitgeistpm/utility/dist/taskeither');
var IPFSHTTPClient = require('ipfs-http-client');
var cluster = require('./cluster.js');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var O__namespace = /*#__PURE__*/_interopNamespaceDefault(O);
var Te__namespace = /*#__PURE__*/_interopNamespaceDefault(Te);
var IPFSHTTPClient__namespace = /*#__PURE__*/_interopNamespaceDefault(IPFSHTTPClient);

/**
 *
 * Create a MetadataStorage object that can store data on an IPFS node
 * and cluster if configured to do so.
 *
 * @generic T - type of metadata
 */
const storage = (config, codec$1 = codec.JsonCodec()) => {
    const node = IPFSHTTPClient__namespace.create({ url: config.node.url });
    const hashAlg = config.hashAlg ?? `sha3-384`;
    return {
        put: Te__namespace.from(async (data) => {
            const content = codec$1.decode(data).unrightOr(error.throws);
            const { cid } = await node.add({ content }, { hashAlg, pin: config?.node.pin ?? true });
            if (config.cluster) {
                await cluster.pin(cid.toString(), config.cluster).catch(_ => {
                    if (config?.node.pin) {
                        node.pin.rm(cid);
                    }
                });
            }
            return cid;
        }),
        get: Te__namespace.from(async (cid) => {
            const json = await read(node, cid);
            const encoded = json.bind(d => codec$1.encode(d).unright());
            return encoded;
        }),
        del: Te__namespace.from(async (cid) => {
            if (config.cluster) {
                await cluster.unpin(cid.toString(), config.cluster);
            }
            await node.pin.rm(cid.toString());
        }),
    };
};
/**
 * Read data from a cid and parse it to a string.
 */
const read = Te__namespace.from(async (node, cid) => {
    const content = [];
    for await (const chunk of node.cat(cid)) {
        content.push(chunk);
    }
    if (content.length === 0)
        return O__namespace.option(O__namespace.none());
    return O__namespace.option(O__namespace.some(content.map(u8a.u8aToString).reduce((acc, chunk) => acc + chunk)));
});

exports.storage = storage;
//# sourceMappingURL=index.js.map
