{"version":3,"file":"index.esm.js","sources":["../../../../src/storage/providers/ipfs/index.ts"],"sourcesContent":["import { u8aToString } from '@polkadot/util/u8a'\nimport { Codec } from '@zeitgeistpm/utility/dist/codec'\nimport { JsonCodec } from '@zeitgeistpm/utility/dist/codec'\nimport { throws } from '@zeitgeistpm/utility/dist/error'\nimport * as O from '@zeitgeistpm/utility/dist/option'\nimport * as Te from '@zeitgeistpm/utility/dist/taskeither'\nimport * as IPFSHTTPClient from 'ipfs-http-client'\nimport { Storage } from '../..'\nimport * as cluster from './cluster'\nimport { IPFSConfiguration } from './types'\n/**\n *\n * Create a MetadataStorage object that can store data on an IPFS node\n * and cluster if configured to do so.\n *\n * @generic T - type of metadata\n */\nexport const storage = <T extends object>(\n  config: IPFSConfiguration,\n  codec: Codec<string, T> = JsonCodec(),\n): Storage<T, IPFSHTTPClient.CID> => {\n  const node = IPFSHTTPClient.create({ url: config.node.url })\n  const hashAlg = config.hashAlg ?? `sha3-384`\n\n  return {\n    put: Te.from(async data => {\n      const content = codec.decode(data).unrightOr(throws)\n\n      const { cid } = await node.add(\n        { content },\n        { hashAlg, pin: config?.node.pin ?? true },\n      )\n\n      if (config.cluster) {\n        await cluster.pin(cid.toString(), config.cluster).catch(_ => {\n          if (config?.node.pin) {\n            node.pin.rm(cid)\n          }\n        })\n      }\n\n      return cid\n    }),\n    get: Te.from(async cid => {\n      const json = await read(node, cid)\n      const encoded = json.bind(d => codec.encode(d).unright())\n      return encoded\n    }),\n    del: Te.from(async cid => {\n      if (config.cluster) {\n        await cluster.unpin(cid.toString(), config.cluster)\n      }\n      await node.pin.rm(cid.toString())\n    }),\n  }\n}\n\n/**\n * Read data from a cid and parse it to a string.\n */\nconst read = Te.from<\n  O.IOption<string>,\n  Error,\n  [node: IPFSHTTPClient.IPFSHTTPClient, cid: IPFSHTTPClient.CID]\n>(async (node, cid) => {\n  const content: Uint8Array[] = []\n\n  for await (const chunk of node.cat(cid)) {\n    content.push(chunk)\n  }\n\n  if (content.length === 0) return O.option(O.none())\n\n  return O.option(O.some(content.map(u8aToString).reduce((acc, chunk) => acc + chunk)))\n})\n"],"names":["cluster.pin","cluster.unpin"],"mappings":";;;;;;;;AAUA;;;;;;AAMG;AACU,MAAA,OAAO,GAAG,CACrB,MAAyB,EACzB,KAA0B,GAAA,SAAS,EAAE,KACH;AAClC,IAAA,MAAM,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;AAC5D,IAAA,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,UAAU,CAAA;IAE5C,OAAO;QACL,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,OAAM,IAAI,KAAG;AACxB,YAAA,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;YAEpD,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,CAC5B,EAAE,OAAO,EAAE,EACX,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,IAAI,IAAI,EAAE,CAC3C,CAAA;YAED,IAAI,MAAM,CAAC,OAAO,EAAE;AAClB,gBAAA,MAAMA,GAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,IAAG;AAC1D,oBAAA,IAAI,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE;AACpB,wBAAA,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;AACjB,qBAAA;AACH,iBAAC,CAAC,CAAA;AACH,aAAA;AAED,YAAA,OAAO,GAAG,CAAA;AACZ,SAAC,CAAC;QACF,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,OAAM,GAAG,KAAG;YACvB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;YAClC,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAA;AACzD,YAAA,OAAO,OAAO,CAAA;AAChB,SAAC,CAAC;QACF,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,OAAM,GAAG,KAAG;YACvB,IAAI,MAAM,CAAC,OAAO,EAAE;AAClB,gBAAA,MAAMC,KAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,CAAA;AACpD,aAAA;YACD,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAA;AACnC,SAAC,CAAC;KACH,CAAA;AACH,EAAC;AAED;;AAEG;AACH,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAIlB,OAAO,IAAI,EAAE,GAAG,KAAI;IACpB,MAAM,OAAO,GAAiB,EAAE,CAAA;IAEhC,WAAW,MAAM,KAAK,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;AACvC,QAAA,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AACpB,KAAA;AAED,IAAA,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAA;AAEnD,IAAA,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,KAAK,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;AACvF,CAAC,CAAC;;;;"}