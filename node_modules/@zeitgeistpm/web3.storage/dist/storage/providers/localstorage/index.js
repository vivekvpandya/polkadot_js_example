'use strict';

var codec = require('@zeitgeistpm/utility/dist/codec');
var error = require('@zeitgeistpm/utility/dist/error');
var O = require('@zeitgeistpm/utility/dist/option');
var Te = require('@zeitgeistpm/utility/dist/taskeither');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var Te__namespace = /*#__PURE__*/_interopNamespaceDefault(Te);

/**
 *
 * Create a MetadataStorage object that can store data to localstorage.
 * Only meant for local development on dev nodes with ephemeral block storage.
 *
 * @generic T - type of metadata
 */
const storage = (codec$1 = codec.JsonCodec()) => {
    return {
        put: Te__namespace.from(async (data) => {
            const content = codec$1.decode(data).unrightOr(error.throws);
            const buffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(content));
            const hash = Array.prototype.map
                .call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2))
                .join('');
            localStorage.setItem(hash, content);
            return hash;
        }),
        get: Te__namespace.from(async (hash) => {
            const data = O.from(localStorage.getItem(hash)).map(codec$1.encode);
            return data.bind(d => d.unright());
        }),
        del: Te__namespace.from(async (hash) => localStorage.removeItem(hash)),
    };
};

exports.storage = storage;
//# sourceMappingURL=index.js.map
