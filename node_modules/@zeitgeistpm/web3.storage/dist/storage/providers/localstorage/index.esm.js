import { JsonCodec } from '@zeitgeistpm/utility/dist/codec';
import { throws } from '@zeitgeistpm/utility/dist/error';
import { from } from '@zeitgeistpm/utility/dist/option';
import * as Te from '@zeitgeistpm/utility/dist/taskeither';

/**
 *
 * Create a MetadataStorage object that can store data to localstorage.
 * Only meant for local development on dev nodes with ephemeral block storage.
 *
 * @generic T - type of metadata
 */
const storage = (codec = JsonCodec()) => {
    return {
        put: Te.from(async (data) => {
            const content = codec.decode(data).unrightOr(throws);
            const buffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(content));
            const hash = Array.prototype.map
                .call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2))
                .join('');
            localStorage.setItem(hash, content);
            return hash;
        }),
        get: Te.from(async (hash) => {
            const data = from(localStorage.getItem(hash)).map(codec.encode);
            return data.bind(d => d.unright());
        }),
        del: Te.from(async (hash) => localStorage.removeItem(hash)),
    };
};

export { storage };
//# sourceMappingURL=index.esm.js.map
