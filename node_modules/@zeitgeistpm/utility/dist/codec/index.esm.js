import { throws } from '../error/index.esm.js';
import { either, tryCatch } from '../either/index.esm.js';
export { JsonCodec } from './impl/json.esm.js';
export { Base64Codec } from './impl/base64.esm.js';

/**
 * Construct a Codec<I, O> from functions that either returns the encoded/decoded as a Right value
 * or throws an error that will result in a Left value
 *
 * @generic I - type of input
 * @generic O - type of output
 */
const codec = (config) => ({
    encode: data => either(tryCatch(() => config.encode(data))),
    decode: data => either(tryCatch(() => config.decode(data))),
});
/**
 * Compose two codecs.
 *
 * @generic I - original input
 * @generic IO - output of first codec, input for the second.
 * @generic O - output of last codec
 */
const compose = (codeca, codecb) => ({
    encode: data => codecb.encode(codeca.encode(data).unrightOr(throws)),
    decode: data => codeca.decode(codecb.decode(data).unrightOr(throws)),
});
/**
 *
 * Flip the encoding decoding of a codec.
 *
 * @generic I - type of input
 * @generic O - type of output
 */
const flip = (codec) => ({
    encode: data => codec.decode(data),
    decode: data => codec.encode(data),
});

export { codec, compose, flip };
//# sourceMappingURL=index.esm.js.map
