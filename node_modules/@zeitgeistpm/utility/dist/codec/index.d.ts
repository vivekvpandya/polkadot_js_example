import { Codec } from './types';
export * from './types';
export * from './impl';
/**
 * Construct a Codec<I, O> from functions that either returns the encoded/decoded as a Right value
 * or throws an error that will result in a Left value
 *
 * @generic I - type of input
 * @generic O - type of output
 */
export declare const codec: <I, O>(config: {
    encode: (input: I) => O;
    decode: (input: O) => I;
}) => Codec<I, O, Error>;
/**
 * Compose two codecs.
 *
 * @generic I - original input
 * @generic IO - output of first codec, input for the second.
 * @generic O - output of last codec
 */
export declare const compose: <I, IO, O>(codeca: Codec<I, IO, Error>, codecb: Codec<IO, O, Error>) => Codec<I, O, Error>;
/**
 *
 * Flip the encoding decoding of a codec.
 *
 * @generic I - type of input
 * @generic O - type of output
 */
export declare const flip: <I, O>(codec: Codec<O, I, Error>) => Codec<I, O, Error>;
//# sourceMappingURL=index.d.ts.map