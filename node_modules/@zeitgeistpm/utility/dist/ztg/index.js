'use strict';

var decimal_js = require('decimal.js');

/**
 *
 * Opaqeue type representing a Ztg value.
 * Widens into bigint.
 *
 * @Monoid `mempty` creates a new empty Ztg of value 0
 *
 * @type Opaque bigint
 */
const Ztg = Symbol();
/**
 * Decimal point in a native ztg
 */
const ZTG = new decimal_js.Decimal(10 ** 10);
/**
 * Typeguard for Ztg values.
 *
 * @param value unknown
 * @returns value is Ztg
 */
const isZtg = (value) => decimal_js.Decimal.isDecimal(value) && '__ztg' in value && value['__ztg'] === Ztg;
/**
 * Wrap a bignumber to Ztg type
 *
 * @param value Decimal
 * @returns Ztg
 */
const wrap = (value) => Object.assign(value, { __ztg: Ztg });
/**
 *
 * Create a empty Ztg value
 *
 * @returns Ztg
 */
const mempty = () => wrap(new decimal_js.Decimal(0));
/**
 * Convert a integer or float to Ztg at the 10th decimal place
 *
 * @param ztg number - number as is
 * @returns Ztg
 */
const fromNumber = (value) => wrap(new decimal_js.Decimal(value).mul(ZTG));
/**
 * Fetch latest ztg price info.
 *
 * @returns Promise<ZTGInfo>
 */
const fetchZTGInfo = async () => fetchZTGInfoFromCoingecko().catch(() => fetchZTGInfoFromSubscan());
const fetchZTGInfoFromCoingecko = async () => {
    const res = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=zeitgeist&vs_currencies=usd&include_24hr_change=true');
    const json = await res.json();
    return {
        price: new decimal_js.Decimal(json.zeitgeist.usd),
        change: new decimal_js.Decimal(json.zeitgeist.usd_24h_change),
    };
};
const fetchZTGInfoFromSubscan = async () => {
    const res = await fetch('https://zeitgeist.api.subscan.io/api/scan/token');
    const json = await res.json();
    const data = json.data.detail.ZTG;
    return {
        price: new decimal_js.Decimal(data.price),
        change: new decimal_js.Decimal(data.price_change).mul(100),
    };
};

exports.ZTG = ZTG;
exports.fetchZTGInfo = fetchZTGInfo;
exports.fetchZTGInfoFromCoingecko = fetchZTGInfoFromCoingecko;
exports.fetchZTGInfoFromSubscan = fetchZTGInfoFromSubscan;
exports.fromNumber = fromNumber;
exports.isZtg = isZtg;
exports.mempty = mempty;
exports.wrap = wrap;
//# sourceMappingURL=index.js.map
