import { Decimal } from 'decimal.js';
/**
 *
 * Opaqeue type representing a Ztg value.
 * Widens into bigint.
 *
 * @Monoid `mempty` creates a new empty Ztg of value 0
 *
 * @type Opaque bigint
 */
declare const Ztg: unique symbol;
export declare type Ztg = Decimal & {
    __ztg: typeof Ztg;
};
/**
 * Decimal point in a native ztg
 */
export declare const ZTG: Decimal;
/**
 * Typeguard for Ztg values.
 *
 * @param value unknown
 * @returns value is Ztg
 */
export declare const isZtg: (value: unknown) => value is Ztg;
/**
 * Wrap a bignumber to Ztg type
 *
 * @param value Decimal
 * @returns Ztg
 */
export declare const wrap: (value: Decimal) => Ztg;
/**
 *
 * Create a empty Ztg value
 *
 * @returns Ztg
 */
export declare const mempty: () => Ztg;
/**
 * Convert a integer or float to Ztg at the 10th decimal place
 *
 * @param ztg number - number as is
 * @returns Ztg
 */
export declare const fromNumber: (value: number) => Ztg;
/**
 * Ztg info with price in usd and 24 hour change
 */
export declare type ZTGPriceInfo = {
    price: Decimal;
    change: Decimal;
};
/**
 * Fetch latest ztg price info.
 *
 * @returns Promise<ZTGInfo>
 */
export declare const fetchZTGInfo: () => Promise<ZTGPriceInfo>;
export declare const fetchZTGInfoFromCoingecko: () => Promise<ZTGPriceInfo>;
export declare const fetchZTGInfoFromSubscan: () => Promise<ZTGPriceInfo>;
export {};
//# sourceMappingURL=index.d.ts.map