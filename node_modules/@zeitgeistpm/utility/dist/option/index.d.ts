export declare type Option<A> = Some<A> | None;
export declare type Some<A> = {
    __option: 'some';
    value: A;
};
export declare type None = {
    __option: 'none';
};
export declare const some: <A>(value: A) => Some<A>;
export declare const none: () => None;
export declare type OrHandler<A> = A | ((e?: Error) => A);
export declare const isSome: <A>(option: Option<A>) => option is Some<A>;
export declare const isNone: <A>(option: Option<A>) => option is None;
export declare const map: <A, B>(f: (a: A) => B, option: Option<A>) => Option<B>;
export declare const bind: <A, B>(f: (a: A) => Option<B>, option: Option<A>) => Option<B>;
export declare const from: <A>(value: A | null) => IOption<A>;
export declare const unwrap: <A>(option: Option<A>) => A | null;
export declare const unwrapOr: <A>(or: OrHandler<A>, option: Option<A>) => A;
export declare type IOption<A> = Option<A> & {
    unwrap: () => null | A;
    unwrapOr: (or: OrHandler<A>) => A;
    map: <B>(f: (a: A) => B) => IOption<B>;
    bind: <B>(f: (a: A) => Option<B>) => IOption<B>;
    isSome: () => boolean;
    isNone: () => boolean;
};
export declare const option: <A>(_option: Option<A>) => IOption<A>;
export declare const fromNullable: <A>(value: A | null | undefined) => IOption<A>;
export declare const tryCatch: <A>(f: () => A) => IOption<A>;
//# sourceMappingURL=index.d.ts.map