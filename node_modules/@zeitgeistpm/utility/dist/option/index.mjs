import { isFunction } from '@polkadot/util/is/function';

const some = (value) => ({
    __option: 'some',
    value,
});
const none = () => ({
    __option: 'none',
});
const isSome = (option) => option.__option === 'some';
const isNone = (option) => option.__option === 'none';
const map = (f, option) => isNone(option) ? option : some(f(option.value));
const bind = (f, option) => isNone(option) ? option : f(option.value);
const from = (value) => option(value ? some(value) : none());
const unwrap = (option) => isSome(option) ? option.value : null;
const unwrapOr = (or, option) => {
    if (isSome(option))
        return option.value;
    else if (isFunction(or))
        return or();
    return or;
};
const option = (_option) => ({
    ..._option,
    unwrap: () => unwrap(_option),
    unwrapOr: or => unwrapOr(or, _option),
    map: (f) => option(map(f, _option)),
    bind: (f) => option(bind(f, _option)),
    isSome: () => isSome(_option),
    isNone: () => isNone(_option),
});
const fromNullable = (value) => {
    if (value === null || value === undefined)
        return option(none());
    return option(some(value));
};
const tryCatch = (f) => {
    try {
        const value = f();
        return option(some(value));
    }
    catch (error) {
        return option(none());
    }
};

export { bind, from, fromNullable, isNone, isSome, map, none, option, some, tryCatch, unwrap, unwrapOr };
//# sourceMappingURL=index.mjs.map
