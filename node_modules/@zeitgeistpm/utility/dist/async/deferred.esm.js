/**
 * Create a new Deffered
 *
 * @generic T - value of the deffered
 * @returns Deferred<T>
 */
const deferred = () => {
    let resolve;
    let reject;
    const value = new Promise((_resolve, _reject) => {
        resolve = _resolve;
        reject = _reject;
    });
    return {
        resolve,
        reject,
        value,
    };
};
/**
 * Type guard for Deffered values.
 *
 * @generic T - value of the deffered
 * @param value any
 * @returns value is Deferred<T>
 */
const isDeferred = (value) => typeof value === 'object' &&
    value !== null &&
    'resolve' in value &&
    'reject' in value &&
    'value' in value &&
    'then' in value.value;

export { deferred, isDeferred };
//# sourceMappingURL=deferred.esm.js.map
