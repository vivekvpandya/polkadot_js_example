import { Deferred } from './deferred';
/**
 * Async Channel ala Go
 * @generic T - type of values in the channel
 */
export declare type Channel<T> = PromiseLike<T> & AsyncIterable<T> & {
    /**
     * Put a new value to the channel
     */
    put: (value: T) => void;
    /**
     * Put a new value to the channel and terminate it.
     */
    end: (value: T) => void;
    /**
     * Take a value from the channel. Will wait if none in buffer.
     */
    take: () => Promise<T>;
};
/**
 * Channel buffers can be concrete values, return values or deferred waiters.
 */
export declare type ChannelBuffer<T> = Array<T | Deferred<T> | Returned<T>>;
/**
 * A returned value type. Terminates the channel.
 */
export declare const returned: unique symbol;
export declare type Returned<R> = {
    [returned]: R;
};
/**
 * Type guard for returned values.
 *
 * @generic T - value type of channel
 * @param value unknwon
 * @returns value is Returned<T>
 */
export declare const isReturned: <T>(value: unknown) => value is Returned<T>;
/**
 * Create a new channel of type T
 *
 * @generic T - value type of channel
 * @param buffer Array<T | Deferred<T> | Returned<T>>
 * @returns Channel<T>
 */
export declare const channel: <T>(buffer?: ChannelBuffer<T>) => Channel<T>;
//# sourceMappingURL=channel.d.ts.map