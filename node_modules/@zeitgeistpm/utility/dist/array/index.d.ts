/**
 * Unpack the item type of an array.
 */
export declare type Unpacked<T> = T extends (infer U)[] ? U : T;
/**
 * Create a range.
 *
 * @param start number
 * @param end number
 * @returns number[]
 */
export declare const range: (start: number, end: number) => number[];
/**
 * Zip two arrays.
 *
 * @generic A - item type of fst placement array
 * @generic B - item type of snd placement array
 * @param as A[]
 * @param bs B[]
 * @returns [A, B][]
 */
export declare const zip: <A, B>(as: A[], bs: B[]) => [A, B][];
/**
 * Project every N item of an array based on a step.
 *
 * @generic A - item type of array
 * @param array A[]
 * @param step number
 * @returns A[]
 */
export declare const project: <A>(array: A[], step: number) => A[];
//# sourceMappingURL=index.d.ts.map